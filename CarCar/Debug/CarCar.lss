
CarCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001612  000016a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  0080007a  0080007a  000016c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000173f  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000481  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ff  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000578  00000000  00000000  00003b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b64  00000000  00000000  0000444f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00005fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	ce 02       	muls	r28, r30
      56:	e2 02       	muls	r30, r18
      58:	d0 02       	muls	r29, r16
      5a:	d2 02       	muls	r29, r18
      5c:	d4 02       	muls	r29, r20
      5e:	d6 02       	muls	r29, r22
      60:	d8 02       	muls	r29, r24
      62:	da 02       	muls	r29, r26
      64:	dc 02       	muls	r29, r28
      66:	de 02       	muls	r29, r30

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 37       	cpi	r26, 0x7A	; 122
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	aa e7       	ldi	r26, 0x7A	; 122
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3c       	cpi	r26, 0xCF	; 207
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <main>
      9e:	0c 94 07 0b 	jmp	0x160e	; 0x160e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <systemTimeInit>:
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
		val -= buff;
      a6:	10 92 cb 00 	sts	0x00CB, r1
		if(!val)
			break;
		val /= 10;	
      aa:	10 92 cc 00 	sts	0x00CC, r1
      ae:	10 92 cd 00 	sts	0x00CD, r1
      b2:	10 92 ce 00 	sts	0x00CE, r1
	if(val<0){
		val = -val;
		neg = 1;
	}
		
	for(uint8_t i=0; i<5; i++){
      b6:	14 bc       	out	0x24, r1	; 36
      b8:	80 e4       	ldi	r24, 0x40	; 64
      ba:	88 bf       	out	0x38, r24	; 56
      bc:	89 b7       	in	r24, 0x39	; 57
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
      be:	80 64       	ori	r24, 0x40	; 64
      c0:	89 bf       	out	0x39, r24	; 57
		if(!val)
			break;
		val /= 10;	
	}
	
	if(neg)
      c2:	78 94       	sei
      c4:	83 e0       	ldi	r24, 0x03	; 3
		msg[5-byte] = 45;
      c6:	85 bd       	out	0x25, r24	; 37
      c8:	08 95       	ret

000000ca <tick>:
      ca:	24 b5       	in	r18, 0x24	; 36
      cc:	80 91 cb 00 	lds	r24, 0x00CB
      d0:	90 91 cc 00 	lds	r25, 0x00CC
      d4:	a0 91 cd 00 	lds	r26, 0x00CD
	if(byte+neg != 6){
      d8:	b0 91 ce 00 	lds	r27, 0x00CE
      dc:	ba 2f       	mov	r27, r26
      de:	a9 2f       	mov	r26, r25
      e0:	98 2f       	mov	r25, r24
      e2:	88 27       	eor	r24, r24
      e4:	bc 01       	movw	r22, r24
      e6:	cd 01       	movw	r24, r26
      e8:	62 0f       	add	r22, r18
		for(uint8_t j = 0; j < byte+neg ; j++)
      ea:	71 1d       	adc	r23, r1
      ec:	81 1d       	adc	r24, r1
      ee:	91 1d       	adc	r25, r1
      f0:	08 95       	ret

000000f2 <time>:
      f2:	0e 94 65 00 	call	0xca	; 0xca <tick>
			msg[j] = msg[6-byte-neg+j];
      f6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__floatunsisf>
      fa:	2d eb       	ldi	r18, 0xBD	; 189
      fc:	37 e3       	ldi	r19, 0x37	; 55
      fe:	46 e0       	ldi	r20, 0x06	; 6
     100:	58 e3       	ldi	r21, 0x38	; 56
     102:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
     106:	08 95       	ret

00000108 <gpioInit>:
     108:	90 b7       	in	r25, 0x30	; 48
     10a:	9b 7f       	andi	r25, 0xFB	; 251
     10c:	90 bf       	out	0x30, r25	; 48
     10e:	e8 2f       	mov	r30, r24
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	31 a1       	ldd	r19, Z+33	; 0x21
     114:	a1 e0       	ldi	r26, 0x01	; 1
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	06 2e       	mov	r0, r22
	}
	
	if(neg)
		msg[5-byte] = 45;
	if(byte+neg != 6){
		for(uint8_t j = 0; j < byte+neg ; j++)
     11a:	02 c0       	rjmp	.+4      	; 0x120 <gpioInit+0x18>
     11c:	aa 0f       	add	r26, r26
     11e:	bb 1f       	adc	r27, r27
     120:	0a 94       	dec	r0
     122:	e2 f7       	brpl	.-8      	; 0x11c <gpioInit+0x14>
     124:	a0 95       	com	r26
			msg[j] = msg[6-byte-neg+j];
	}
	
	return uartTransmit(msg, byte+neg, 0.15);
     126:	3a 23       	and	r19, r26
     128:	84 2f       	mov	r24, r20
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	ac 01       	movw	r20, r24
     12e:	06 2e       	mov	r0, r22
     130:	02 c0       	rjmp	.+4      	; 0x136 <gpioInit+0x2e>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	0a 94       	dec	r0
     138:	e2 f7       	brpl	.-8      	; 0x132 <gpioInit+0x2a>
     13a:	43 2b       	or	r20, r19
		msg[5-i] = buff+48;
		byte++;
		val -= buff;
		if(!val)
			break;
		val /= 10;	
     13c:	41 a3       	std	Z+33, r20	; 0x21
     13e:	82 a1       	ldd	r24, Z+34	; 0x22
     140:	a8 23       	and	r26, r24
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	c9 01       	movw	r24, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <gpioInit+0x44>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <gpioInit+0x40>
     150:	bc 01       	movw	r22, r24
	}
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
     152:	6a 2b       	or	r22, r26
     154:	62 a3       	std	Z+34, r22	; 0x22
		val = -val;
		neg = 1;
	}
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
     156:	08 95       	ret

00000158 <gpioWrite>:
     158:	e8 2f       	mov	r30, r24
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	52 a1       	ldd	r21, Z+34	; 0x22
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	c9 01       	movw	r24, r18
     164:	06 2e       	mov	r0, r22
			msg[j] = msg[6-byte-neg+j];
	}
	
	return uartTransmit(msg, byte+neg, 0.15);
	
}
     166:	02 c0       	rjmp	.+4      	; 0x16c <gpioWrite+0x14>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <gpioWrite+0x10>
     170:	80 95       	com	r24
     172:	85 23       	and	r24, r21
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	9a 01       	movw	r18, r20
     178:	02 c0       	rjmp	.+4      	; 0x17e <gpioWrite+0x26>
     17a:	22 0f       	add	r18, r18
     17c:	33 1f       	adc	r19, r19
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <gpioWrite+0x22>
     182:	b9 01       	movw	r22, r18
     184:	68 2b       	or	r22, r24
     186:	62 a3       	std	Z+34, r22	; 0x22
     188:	08 95       	ret

0000018a <gpioReadDebounce>:
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	c8 2f       	mov	r28, r24
uint8_t gpioReadDebounce(uint8_t PB){
	static float PBtime[2] = {-1, -1};
	static uint8_t PBstate[2];
	uint8_t buff;
	
	if(PB)
     190:	88 23       	and	r24, r24
     192:	29 f0       	breq	.+10     	; 0x19e <gpioReadDebounce+0x14>
			pin			0 - 7
Return:		1(HIGHI) / 0(LOW)
*/
uint8_t gpioRead(uint8_t port, uint8_t pin){
	
	return (_SFR_IO8(port) >> pin) & 0x01;					//read value from PIN register
     194:	80 b3       	in	r24, 0x10	; 16
     196:	86 fb       	bst	r24, 6
     198:	88 27       	eor	r24, r24
     19a:	80 f9       	bld	r24, 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <gpioReadDebounce+0x1c>
     19e:	80 b3       	in	r24, 0x10	; 16
     1a0:	83 fb       	bst	r24, 3
     1a2:	88 27       	eor	r24, r24
     1a4:	80 f9       	bld	r24, 0
	if(PB)
		buff = gpioRead(BT2);
	else
		buff = gpioRead(BT1);
		
	if(!buff){
     1a6:	81 11       	cpse	r24, r1
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <gpioReadDebounce+0x4e>
		
		PBtime[PB] = time();
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     1b0:	fe 01       	movw	r30, r28
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e0 5a       	subi	r30, 0xA0	; 160
     1bc:	ff 4f       	sbci	r31, 0xFF	; 255
     1be:	60 83       	st	Z, r22
     1c0:	71 83       	std	Z+1, r23	; 0x01
     1c2:	82 83       	std	Z+2, r24	; 0x02
     1c4:	93 83       	std	Z+3, r25	; 0x03
		if(!PBstate[PB]){
     1c6:	fe 01       	movw	r30, r28
     1c8:	e5 57       	subi	r30, 0x75	; 117
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 81       	ld	r24, Z
     1ce:	81 11       	cpse	r24, r1
     1d0:	20 c0       	rjmp	.+64     	; 0x212 <gpioReadDebounce+0x88>
			PBstate[PB] = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 83       	st	Z, r24
			return 1;	
     1d6:	20 c0       	rjmp	.+64     	; 0x218 <gpioReadDebounce+0x8e>
			return 0;
		}
		
	}else{
		
		if(time() - PBtime[PB] > 0.05)
     1d8:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
     1de:	fe 01       	movw	r30, r28
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	e0 5a       	subi	r30, 0xA0	; 160
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	20 81       	ld	r18, Z
     1ee:	31 81       	ldd	r19, Z+1	; 0x01
     1f0:	42 81       	ldd	r20, Z+2	; 0x02
     1f2:	53 81       	ldd	r21, Z+3	; 0x03
     1f4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     1f8:	2d ec       	ldi	r18, 0xCD	; 205
     1fa:	3c ec       	ldi	r19, 0xCC	; 204
     1fc:	4c e4       	ldi	r20, 0x4C	; 76
     1fe:	5d e3       	ldi	r21, 0x3D	; 61
     200:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     204:	18 16       	cp	r1, r24
     206:	3c f4       	brge	.+14     	; 0x216 <gpioReadDebounce+0x8c>
			PBstate[PB] = 0;
     208:	c5 57       	subi	r28, 0x75	; 117
     20a:	df 4f       	sbci	r29, 0xFF	; 255
     20c:	18 82       	st	Y, r1
		return 0;
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	03 c0       	rjmp	.+6      	; 0x218 <gpioReadDebounce+0x8e>
		PBtime[PB] = time();
		if(!PBstate[PB]){
			PBstate[PB] = 1;
			return 1;	
		}else{
			return 0;
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	01 c0       	rjmp	.+2      	; 0x218 <gpioReadDebounce+0x8e>
		
	}else{
		
		if(time() - PBtime[PB] > 0.05)
			PBstate[PB] = 0;
		return 0;
     216:	80 e0       	ldi	r24, 0x00	; 0
		
	}
	
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <delay>:
/*
Function:	delay
Arguments:	time		delay in seconds
Remarks:	CKSEL3:0 should be set to 0001 for 1MHz Internal RC Oscillator
*/
void delay(float timeDelay){
     21e:	8f 92       	push	r8
     220:	9f 92       	push	r9
     222:	af 92       	push	r10
     224:	bf 92       	push	r11
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	4b 01       	movw	r8, r22
     230:	5c 01       	movw	r10, r24
	
	float timeBuff = time();						//initialize starting time
     232:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     236:	6b 01       	movw	r12, r22
     238:	7c 01       	movw	r14, r24
	while(time() - timeBuff < timeDelay);			//wait for specified time
     23a:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     23e:	a7 01       	movw	r20, r14
     240:	96 01       	movw	r18, r12
     242:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     246:	a5 01       	movw	r20, r10
     248:	94 01       	movw	r18, r8
     24a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     24e:	88 23       	and	r24, r24
     250:	a4 f3       	brlt	.-24     	; 0x23a <delay+0x1c>
	
}
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	08 95       	ret

00000264 <pwmInit>:
Function:	pwmInit
*/
void pwmInit(){ 
	
	
	gpioInit(0x10, 4, 1, 0);					//set PD4 as output
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	64 e0       	ldi	r22, 0x04	; 4
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(0x10, 5, 1, 0);					//set PD5 as output
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	41 e0       	ldi	r20, 0x01	; 1
     274:	65 e0       	ldi	r22, 0x05	; 5
     276:	80 e1       	ldi	r24, 0x10	; 16
     278:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	
	
	TCNT1 = 0;
     27c:	1d bc       	out	0x2d, r1	; 45
     27e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0;
     280:	1b bc       	out	0x2b, r1	; 43
     282:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
     284:	19 bc       	out	0x29, r1	; 41
     286:	18 bc       	out	0x28, r1	; 40
	TCCR1A = 0b10100011;						//fast PWM, non-inverting
     288:	83 ea       	ldi	r24, 0xA3	; 163
     28a:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B = 0b00001010;						//prescaler 8
     28c:	8a e0       	ldi	r24, 0x0A	; 10
     28e:	8e bd       	out	0x2e, r24	; 46
     290:	08 95       	ret

00000292 <pwmSet>:

/*
Function:	pwmSet
Arguments:	dutyCycle		0 - 100
*/
void pwmSet(uint8_t dutyCycle1, uint8_t dutyCycle2){
     292:	cf 93       	push	r28
     294:	c6 2f       	mov	r28, r22
	
	
	OCR1A = (float)dutyCycle1 /100.0 * 1023.0 ;	//set output compare register value
     296:	68 2f       	mov	r22, r24
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__floatunsisf>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	48 ec       	ldi	r20, 0xC8	; 200
     2a8:	52 e4       	ldi	r21, 0x42	; 66
     2aa:	0e 94 4f 09 	call	0x129e	; 0x129e <__divsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 ec       	ldi	r19, 0xC0	; 192
     2b2:	4f e7       	ldi	r20, 0x7F	; 127
     2b4:	54 e4       	ldi	r21, 0x44	; 68
     2b6:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
     2ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fixunssfsi>
     2be:	7b bd       	out	0x2b, r23	; 43
     2c0:	6a bd       	out	0x2a, r22	; 42
	OCR1B = (float)dutyCycle2 /100.0 * 1023.0 ;	//set output compare register value
     2c2:	6c 2f       	mov	r22, r28
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__floatunsisf>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	48 ec       	ldi	r20, 0xC8	; 200
     2d4:	52 e4       	ldi	r21, 0x42	; 66
     2d6:	0e 94 4f 09 	call	0x129e	; 0x129e <__divsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 ec       	ldi	r19, 0xC0	; 192
     2de:	4f e7       	ldi	r20, 0x7F	; 127
     2e0:	54 e4       	ldi	r21, 0x44	; 68
     2e2:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
     2e6:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fixunssfsi>
     2ea:	79 bd       	out	0x29, r23	; 41
     2ec:	68 bd       	out	0x28, r22	; 40
	
	
	

}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <twiInit>:
Remarks:	SCL freq	CLK / [16+2(TWBR)(4^prescaler in TWSR)] = 41.667kHz
			pull-up		internal resistors can be disabled and externally add 1.5kOhm or higher resistors
*/
void twiInit(){
	
	PORTC |= 0b00000011;	//enable pullup resistors
     2f2:	85 b3       	in	r24, 0x15	; 21
     2f4:	83 60       	ori	r24, 0x03	; 3
     2f6:	85 bb       	out	0x15, r24	; 21
	TWBR = 1;				//set TWBR for SCL frequency = 41.667kHz
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 b9       	out	0x00, r24	; 0
	TWSR = 0b00000000;		//prescaler = 1
     2fc:	11 b8       	out	0x01, r1	; 1
     2fe:	08 95       	ret

00000300 <twiWrite>:
Arguments:	add			slave address (without shifting 1 bit to the left)
			byte		number of bytes to write
			*data		pointer to data to be sent, in uint8_t
Return:		1(error during TWI) or 0(no error)
*/
uint8_t twiWrite(uint8_t add, uint8_t byte, uint8_t* data){
     300:	e8 2f       	mov	r30, r24
	uint8_t err = 0;
	
	TWCR = 0b11100100;					//send start
     302:	94 ee       	ldi	r25, 0xE4	; 228
     304:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&0b10000000));			//wait for start to send
     306:	06 b6       	in	r0, 0x36	; 54
     308:	07 fe       	sbrs	r0, 7
     30a:	fd cf       	rjmp	.-6      	; 0x306 <twiWrite+0x6>
	if((TWSR&0b11111000)!=Start)		//check status if start not sent
     30c:	91 b1       	in	r25, 0x01	; 1
     30e:	98 7f       	andi	r25, 0xF8	; 248
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	98 30       	cpi	r25, 0x08	; 8
     314:	09 f4       	brne	.+2      	; 0x318 <twiWrite+0x18>
     316:	80 e0       	ldi	r24, 0x00	; 0
		err = 1;
	if(!err){
     318:	81 11       	cpse	r24, r1
     31a:	21 c0       	rjmp	.+66     	; 0x35e <twiWrite+0x5e>
		TWDR = (add<<1)&0b11111110;			//set address and write bit
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	e3 b9       	out	0x03, r30	; 3
		TWCR = 0b11000100;					//send data
     324:	94 ec       	ldi	r25, 0xC4	; 196
     326:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
     328:	06 b6       	in	r0, 0x36	; 54
     32a:	07 fe       	sbrs	r0, 7
     32c:	fd cf       	rjmp	.-6      	; 0x328 <twiWrite+0x28>
		if((TWSR&0b11111000)!=AddW)			//check if add acked by slave
     32e:	91 b1       	in	r25, 0x01	; 1
     330:	98 7f       	andi	r25, 0xF8	; 248
     332:	98 31       	cpi	r25, 0x18	; 24
     334:	b9 f4       	brne	.+46     	; 0x364 <twiWrite+0x64>
     336:	18 c0       	rjmp	.+48     	; 0x368 <twiWrite+0x68>
			err = 1;
	}
	if(!err){
		for(uint8_t i=byte; i>0; i--){
			TWDR = *(uint8_t*)(data+byte-i);	//set data
     338:	f9 01       	movw	r30, r18
     33a:	e9 1b       	sub	r30, r25
     33c:	f1 09       	sbc	r31, r1
     33e:	e4 0f       	add	r30, r20
     340:	f5 1f       	adc	r31, r21
     342:	60 81       	ld	r22, Z
     344:	63 b9       	out	0x03, r22	; 3
			TWCR = 0b11000100;					//send data
     346:	76 bf       	out	0x36, r23	; 54
			while(!(TWCR&0b10000000));			//wait for data to send and receive ack
     348:	06 b6       	in	r0, 0x36	; 54
     34a:	07 fe       	sbrs	r0, 7
     34c:	fd cf       	rjmp	.-6      	; 0x348 <twiWrite+0x48>
			if((TWSR&0b11111000)!=DatW){		//check if data acked by slave
     34e:	61 b1       	in	r22, 0x01	; 1
     350:	68 7f       	andi	r22, 0xF8	; 248
     352:	68 32       	cpi	r22, 0x28	; 40
     354:	19 f4       	brne	.+6      	; 0x35c <twiWrite+0x5c>
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
		if((TWSR&0b11111000)!=AddW)			//check if add acked by slave
			err = 1;
	}
	if(!err){
		for(uint8_t i=byte; i>0; i--){
     356:	91 50       	subi	r25, 0x01	; 1
     358:	79 f7       	brne	.-34     	; 0x338 <twiWrite+0x38>
     35a:	01 c0       	rjmp	.+2      	; 0x35e <twiWrite+0x5e>
			TWDR = *(uint8_t*)(data+byte-i);	//set data
			TWCR = 0b11000100;					//send data
			while(!(TWCR&0b10000000));			//wait for data to send and receive ack
			if((TWSR&0b11111000)!=DatW){		//check if data acked by slave
				err = 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
		}
	}

	TWCR = 0b11010100;					//send stop
     35e:	94 ed       	ldi	r25, 0xD4	; 212
     360:	96 bf       	out	0x36, r25	; 54
     362:	08 95       	ret
	if(!err){
		TWDR = (add<<1)&0b11111110;			//set address and write bit
		TWCR = 0b11000100;					//send data
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
		if((TWSR&0b11111000)!=AddW)			//check if add acked by slave
			err = 1;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	fb cf       	rjmp	.-10     	; 0x35e <twiWrite+0x5e>
	}
	if(!err){
		for(uint8_t i=byte; i>0; i--){
     368:	66 23       	and	r22, r22
     36a:	c9 f3       	breq	.-14     	; 0x35e <twiWrite+0x5e>
     36c:	96 2f       	mov	r25, r22
			TWDR = *(uint8_t*)(data+byte-i);	//set data
     36e:	26 2f       	mov	r18, r22
     370:	30 e0       	ldi	r19, 0x00	; 0
			TWCR = 0b11000100;					//send data
     372:	74 ec       	ldi	r23, 0xC4	; 196
     374:	e1 cf       	rjmp	.-62     	; 0x338 <twiWrite+0x38>

00000376 <twiCombine>:
			dataW		byte to be written
			byteR		number of bytes to be read
			*dataR		pointer to data storage location, in uint8_t
Return:		1(error during TWI) or 0(no error)
*/
uint8_t twiCombine(uint8_t add, uint8_t dataW, uint8_t byteR, uint8_t* dataR){
     376:	e8 2f       	mov	r30, r24
	
	uint8_t err = 0;
	
	TWCR = 0b11100100;					//send start
     378:	94 ee       	ldi	r25, 0xE4	; 228
     37a:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&0b10000000));			//wait for start to send
     37c:	06 b6       	in	r0, 0x36	; 54
     37e:	07 fe       	sbrs	r0, 7
     380:	fd cf       	rjmp	.-6      	; 0x37c <twiCombine+0x6>
	if((TWSR&0b11111000)!=Start)		//check status if start not sent
     382:	91 b1       	in	r25, 0x01	; 1
     384:	98 7f       	andi	r25, 0xF8	; 248
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	98 30       	cpi	r25, 0x08	; 8
     38a:	09 f4       	brne	.+2      	; 0x38e <twiCombine+0x18>
     38c:	80 e0       	ldi	r24, 0x00	; 0
		err = 1;
	if(!err){
     38e:	81 11       	cpse	r24, r1
     390:	4c c0       	rjmp	.+152    	; 0x42a <twiCombine+0xb4>
		TWDR = (add<<1)&0b11111110;			//set address and write bit
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e3 b9       	out	0x03, r30	; 3
		TWCR = 0b11000100;					//send data
     39a:	94 ec       	ldi	r25, 0xC4	; 196
     39c:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
     39e:	06 b6       	in	r0, 0x36	; 54
     3a0:	07 fe       	sbrs	r0, 7
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <twiCombine+0x28>
		if((TWSR&0b11111000)!=AddW)			//check if add acked by slave
     3a4:	91 b1       	in	r25, 0x01	; 1
     3a6:	98 7f       	andi	r25, 0xF8	; 248
     3a8:	98 31       	cpi	r25, 0x18	; 24
     3aa:	09 f0       	breq	.+2      	; 0x3ae <twiCombine+0x38>
     3ac:	41 c0       	rjmp	.+130    	; 0x430 <twiCombine+0xba>
     3ae:	42 c0       	rjmp	.+132    	; 0x434 <twiCombine+0xbe>
			err = 1;
	}
	if(!err){
		TWDR = dataW;						//set data
		TWCR = 0b11000100;					//send data
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
     3b0:	06 b6       	in	r0, 0x36	; 54
     3b2:	07 fe       	sbrs	r0, 7
     3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <twiCombine+0x3a>
		if((TWSR&0b11111000)!=DatW)			//check if data acked by slave
     3b6:	91 b1       	in	r25, 0x01	; 1
     3b8:	98 7f       	andi	r25, 0xF8	; 248
     3ba:	98 32       	cpi	r25, 0x28	; 40
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <twiCombine+0x4a>
     3be:	41 c0       	rjmp	.+130    	; 0x442 <twiCombine+0xcc>
     3c0:	3d c0       	rjmp	.+122    	; 0x43c <twiCombine+0xc6>
		
	}

	if(!err){
		TWCR = 0b11100100;					//send restart
		while(!(TWCR&0b10000000));			//wait for restart to send
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <twiCombine+0x4c>
		if((TWSR&0b11111000)!=RStart)		//check status if restart not sent
     3c8:	91 b1       	in	r25, 0x01	; 1
     3ca:	98 7f       	andi	r25, 0xF8	; 248
     3cc:	90 31       	cpi	r25, 0x10	; 16
     3ce:	d9 f5       	brne	.+118    	; 0x446 <twiCombine+0xd0>
     3d0:	3c c0       	rjmp	.+120    	; 0x44a <twiCombine+0xd4>
			err = 1;
	}
	if(!err){
		TWDR = (add<<1)|0b00000001;		//set data
		TWCR = 0b11000100;				//send data
		while(!(TWCR&0b10000000));		//wait for data to send and receive ack
     3d2:	06 b6       	in	r0, 0x36	; 54
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <twiCombine+0x5c>
		if((TWSR&0b11111000)!=AddR)		//check if slave not respond
     3d8:	91 b1       	in	r25, 0x01	; 1
     3da:	98 7f       	andi	r25, 0xF8	; 248
     3dc:	90 34       	cpi	r25, 0x40	; 64
     3de:	d1 f5       	brne	.+116    	; 0x454 <twiCombine+0xde>
     3e0:	3b c0       	rjmp	.+118    	; 0x458 <twiCombine+0xe2>
		err = 1;
	}
	if(!err){
		for(uint8_t i=byteR; i>1; i--){
			TWCR = 0b11000100;					//continue to recieve data
     3e2:	a6 bf       	out	0x36, r26	; 54
			while(!(TWCR&0b10000000));			//wait for data done receiving
     3e4:	06 b6       	in	r0, 0x36	; 54
     3e6:	07 fe       	sbrs	r0, 7
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <twiCombine+0x6e>
			if((TWSR&0b11111000)!=DatR){		//check if data corrupted
     3ea:	51 b1       	in	r21, 0x01	; 1
     3ec:	58 7f       	andi	r21, 0xF8	; 248
     3ee:	50 35       	cpi	r21, 0x50	; 80
     3f0:	c9 f4       	brne	.+50     	; 0x424 <twiCombine+0xae>
				err = 1;
				break;
			}
			*(uint8_t*)(dataR+byteR-i) = TWDR;	//store data to pointer
     3f2:	53 b1       	in	r21, 0x03	; 3
     3f4:	fb 01       	movw	r30, r22
     3f6:	e9 1b       	sub	r30, r25
     3f8:	f1 09       	sbc	r31, r1
     3fa:	e2 0f       	add	r30, r18
     3fc:	f3 1f       	adc	r31, r19
     3fe:	50 83       	st	Z, r21
		while(!(TWCR&0b10000000));		//wait for data to send and receive ack
		if((TWSR&0b11111000)!=AddR)		//check if slave not respond
		err = 1;
	}
	if(!err){
		for(uint8_t i=byteR; i>1; i--){
     400:	91 50       	subi	r25, 0x01	; 1
     402:	91 30       	cpi	r25, 0x01	; 1
     404:	71 f7       	brne	.-36     	; 0x3e2 <twiCombine+0x6c>
     406:	2f c0       	rjmp	.+94     	; 0x466 <twiCombine+0xf0>
			}
			*(uint8_t*)(dataR+byteR-i) = TWDR;	//store data to pointer
		}
		if(!err){
			TWCR = 0b10000100;					//continue to recieve data with NACK
			while(!(TWCR&0b10000000));			//wait for data done receiving
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <twiCombine+0x92>
			if((TWSR&0b11111000)!=DatRN)			//check if data corrupted
     40e:	91 b1       	in	r25, 0x01	; 1
     410:	98 7f       	andi	r25, 0xF8	; 248
     412:	98 35       	cpi	r25, 0x58	; 88
     414:	49 f4       	brne	.+18     	; 0x428 <twiCombine+0xb2>
				err = 1;
			else
				*(uint8_t*)(dataR+byteR-1) = TWDR;	//store data to pointer
     416:	93 b1       	in	r25, 0x03	; 3
     418:	24 0f       	add	r18, r20
     41a:	31 1d       	adc	r19, r1
     41c:	f9 01       	movw	r30, r18
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	90 83       	st	Z, r25
     422:	03 c0       	rjmp	.+6      	; 0x42a <twiCombine+0xb4>
	if(!err){
		for(uint8_t i=byteR; i>1; i--){
			TWCR = 0b11000100;					//continue to recieve data
			while(!(TWCR&0b10000000));			//wait for data done receiving
			if((TWSR&0b11111000)!=DatR){		//check if data corrupted
				err = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	01 c0       	rjmp	.+2      	; 0x42a <twiCombine+0xb4>
		}
		if(!err){
			TWCR = 0b10000100;					//continue to recieve data with NACK
			while(!(TWCR&0b10000000));			//wait for data done receiving
			if((TWSR&0b11111000)!=DatRN)			//check if data corrupted
				err = 1;
     428:	81 e0       	ldi	r24, 0x01	; 1
			else
				*(uint8_t*)(dataR+byteR-1) = TWDR;	//store data to pointer
		}
	}

	TWCR = 0b11010100;					//send stop
     42a:	94 ed       	ldi	r25, 0xD4	; 212
     42c:	96 bf       	out	0x36, r25	; 54
     42e:	08 95       	ret
	if(!err){
		TWDR = (add<<1)&0b11111110;			//set address and write bit
		TWCR = 0b11000100;					//send data
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
		if((TWSR&0b11111000)!=AddW)			//check if add acked by slave
			err = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	fb cf       	rjmp	.-10     	; 0x42a <twiCombine+0xb4>
	}
	if(!err){
		TWDR = dataW;						//set data
     434:	63 b9       	out	0x03, r22	; 3
		TWCR = 0b11000100;					//send data
     436:	94 ec       	ldi	r25, 0xC4	; 196
     438:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
     43a:	ba cf       	rjmp	.-140    	; 0x3b0 <twiCombine+0x3a>
			err = 1;
		
	}

	if(!err){
		TWCR = 0b11100100;					//send restart
     43c:	94 ee       	ldi	r25, 0xE4	; 228
     43e:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR&0b10000000));			//wait for restart to send
     440:	c0 cf       	rjmp	.-128    	; 0x3c2 <twiCombine+0x4c>
	if(!err){
		TWDR = dataW;						//set data
		TWCR = 0b11000100;					//send data
		while(!(TWCR&0b10000000));			//wait for data to send and receive ack
		if((TWSR&0b11111000)!=DatW)			//check if data acked by slave
			err = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	f2 cf       	rjmp	.-28     	; 0x42a <twiCombine+0xb4>

	if(!err){
		TWCR = 0b11100100;					//send restart
		while(!(TWCR&0b10000000));			//wait for restart to send
		if((TWSR&0b11111000)!=RStart)		//check status if restart not sent
			err = 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	f0 cf       	rjmp	.-32     	; 0x42a <twiCombine+0xb4>
	}
	if(!err){
		TWDR = (add<<1)|0b00000001;		//set data
     44a:	e1 60       	ori	r30, 0x01	; 1
     44c:	e3 b9       	out	0x03, r30	; 3
		TWCR = 0b11000100;				//send data
     44e:	94 ec       	ldi	r25, 0xC4	; 196
     450:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR&0b10000000));		//wait for data to send and receive ack
     452:	bf cf       	rjmp	.-130    	; 0x3d2 <twiCombine+0x5c>
		if((TWSR&0b11111000)!=AddR)		//check if slave not respond
		err = 1;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	e9 cf       	rjmp	.-46     	; 0x42a <twiCombine+0xb4>
	}
	if(!err){
		for(uint8_t i=byteR; i>1; i--){
     458:	42 30       	cpi	r20, 0x02	; 2
     45a:	28 f0       	brcs	.+10     	; 0x466 <twiCombine+0xf0>
     45c:	94 2f       	mov	r25, r20
			TWCR = 0b11000100;					//continue to recieve data
     45e:	a4 ec       	ldi	r26, 0xC4	; 196
			while(!(TWCR&0b10000000));			//wait for data done receiving
			if((TWSR&0b11111000)!=DatR){		//check if data corrupted
				err = 1;
				break;
			}
			*(uint8_t*)(dataR+byteR-i) = TWDR;	//store data to pointer
     460:	64 2f       	mov	r22, r20
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	be cf       	rjmp	.-132    	; 0x3e2 <twiCombine+0x6c>
		}
		if(!err){
			TWCR = 0b10000100;					//continue to recieve data with NACK
     466:	94 e8       	ldi	r25, 0x84	; 132
     468:	96 bf       	out	0x36, r25	; 54
			while(!(TWCR&0b10000000));			//wait for data done receiving
     46a:	ce cf       	rjmp	.-100    	; 0x408 <twiCombine+0x92>

0000046c <uartInit>:
Function:	uartInit
Remarks:	baudrate 9600
*/
void uartInit(){
	
	UCSRA = 0b00000010;			//double speed operation, less error
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	8b b9       	out	0x0b, r24	; 11
	UCSRC = 0b10000110;			//asynchronous, no parity, 1 stop bit,
     470:	86 e8       	ldi	r24, 0x86	; 134
     472:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0b00001100;			//baudrate = 9600
     474:	8c e0       	ldi	r24, 0x0C	; 12
     476:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = 0b00011000;			//enable TX&RX, 8-bit frame
     478:	88 e1       	ldi	r24, 0x18	; 24
     47a:	8a b9       	out	0x0a, r24	; 10
     47c:	08 95       	ret

0000047e <ssegInit>:
	float interval;
};

struct sseg_t sseg;

void ssegInit(uint8_t* port, uint8_t* pin, float freq){
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	7f 92       	push	r7
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	29 01       	movw	r4, r18
     4a0:	3a 01       	movw	r6, r20
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fe ea       	ldi	r31, 0xAE	; 174
     4a6:	cf 2e       	mov	r12, r31
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	df 2e       	mov	r13, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	0f 2e       	mov	r0, r31
     4b0:	f7 eb       	ldi	r31, 0xB7	; 183
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
     4ba:	c6 2f       	mov	r28, r22
     4bc:	d7 2f       	mov	r29, r23
     4be:	8c 01       	movw	r16, r24
     4c0:	0f 2e       	mov	r0, r31
     4c2:	f0 ec       	ldi	r31, 0xC0	; 192
     4c4:	af 2e       	mov	r10, r31
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	bf 2e       	mov	r11, r31
     4ca:	f0 2d       	mov	r31, r0
     4cc:	48 01       	movw	r8, r16
	
	for(uint8_t i=0; i<9; i++){
		sseg.port[i] = *(port+i);
     4ce:	d8 01       	movw	r26, r16
     4d0:	8d 91       	ld	r24, X+
     4d2:	8d 01       	movw	r16, r26
     4d4:	f6 01       	movw	r30, r12
     4d6:	81 93       	st	Z+, r24
     4d8:	6f 01       	movw	r12, r30
     4da:	de 01       	movw	r26, r28
		sseg.pin[i] = *(pin+i);
     4dc:	89 91       	ld	r24, Y+
     4de:	f7 01       	movw	r30, r14
     4e0:	81 93       	st	Z+, r24
     4e2:	7f 01       	movw	r14, r30
		gpioInit(*(port+i), *(pin+i), output, 0);
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	6c 91       	ld	r22, X
     4ea:	d4 01       	movw	r26, r8
     4ec:	8c 91       	ld	r24, X
     4ee:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>

struct sseg_t sseg;

void ssegInit(uint8_t* port, uint8_t* pin, float freq){
	
	for(uint8_t i=0; i<9; i++){
     4f2:	ea 14       	cp	r14, r10
     4f4:	fb 04       	cpc	r15, r11
     4f6:	51 f7       	brne	.-44     	; 0x4cc <ssegInit+0x4e>
		sseg.port[i] = *(port+i);
		sseg.pin[i] = *(pin+i);
		gpioInit(*(port+i), *(pin+i), output, 0);
	}
	sseg.val[0] = sseg.val[1] = 0;
     4f8:	10 92 c1 00 	sts	0x00C1, r1
     4fc:	10 92 c0 00 	sts	0x00C0, r1
	sseg.flag = 0;
     500:	10 92 c2 00 	sts	0x00C2, r1
	sseg.t = time();
     504:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     508:	60 93 c3 00 	sts	0x00C3, r22
     50c:	70 93 c4 00 	sts	0x00C4, r23
     510:	80 93 c5 00 	sts	0x00C5, r24
     514:	90 93 c6 00 	sts	0x00C6, r25
	sseg.interval = 1.0/freq;
     518:	a3 01       	movw	r20, r6
     51a:	92 01       	movw	r18, r4
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e8       	ldi	r24, 0x80	; 128
     522:	9f e3       	ldi	r25, 0x3F	; 63
     524:	0e 94 4f 09 	call	0x129e	; 0x129e <__divsf3>
     528:	60 93 c7 00 	sts	0x00C7, r22
     52c:	70 93 c8 00 	sts	0x00C8, r23
     530:	80 93 c9 00 	sts	0x00C9, r24
     534:	90 93 ca 00 	sts	0x00CA, r25
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	bf 90       	pop	r11
     54a:	af 90       	pop	r10
     54c:	9f 90       	pop	r9
     54e:	8f 90       	pop	r8
     550:	7f 90       	pop	r7
     552:	6f 90       	pop	r6
     554:	5f 90       	pop	r5
     556:	4f 90       	pop	r4
     558:	08 95       	ret

0000055a <ssegEnable>:

void ssegEnable(uint8_t en){
	if(en)
     55a:	88 23       	and	r24, r24
     55c:	31 f0       	breq	.+12     	; 0x56a <ssegEnable+0x10>
		sseg.flag |= 0b00000001;
     55e:	e2 ec       	ldi	r30, 0xC2	; 194
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	81 60       	ori	r24, 0x01	; 1
     566:	80 83       	st	Z, r24
     568:	08 95       	ret
	else
		sseg.flag &= 0b11111110;
     56a:	e2 ec       	ldi	r30, 0xC2	; 194
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	8e 7f       	andi	r24, 0xFE	; 254
     572:	80 83       	st	Z, r24
     574:	08 95       	ret

00000576 <ssegWrite>:
/*
Function:	ssegWrite
Arguments:	digit		1(first digit) or 2(second digit)
			val			0 to 9 to be shown
*/
void ssegWrite(uint8_t digit, uint8_t val){
     576:	bf 92       	push	r11
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
	uint8_t buff;
	switch(val){
     588:	46 2f       	mov	r20, r22
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	4a 30       	cpi	r20, 0x0A	; 10
     58e:	51 05       	cpc	r21, r1
     590:	b8 f4       	brcc	.+46     	; 0x5c0 <ssegWrite+0x4a>
     592:	fa 01       	movw	r30, r20
     594:	e6 5d       	subi	r30, 0xD6	; 214
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__tablejump2__>
		case 0:
			buff = 0b11111100;
     59c:	9c ef       	ldi	r25, 0xFC	; 252
     59e:	13 c0       	rjmp	.+38     	; 0x5c6 <ssegWrite+0x50>
			break;
		case 1:
			buff = 0b01100000;
			break;
		case 2:
			buff = 0b11011010;
     5a0:	9a ed       	ldi	r25, 0xDA	; 218
			break;
     5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <ssegWrite+0x50>
		case 3:
			buff = 0b11110010;
     5a4:	92 ef       	ldi	r25, 0xF2	; 242
			break;
     5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <ssegWrite+0x50>
		case 4:
			buff = 0b01100110;
     5a8:	96 e6       	ldi	r25, 0x66	; 102
			break;
     5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <ssegWrite+0x50>
		case 5:
			buff = 0b10110110;
     5ac:	96 eb       	ldi	r25, 0xB6	; 182
			break;
     5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <ssegWrite+0x50>
		case 6:
			buff = 0b10111110;
     5b0:	9e eb       	ldi	r25, 0xBE	; 190
			break;
     5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <ssegWrite+0x50>
		case 7:
			buff = 0b11100000;
     5b4:	90 ee       	ldi	r25, 0xE0	; 224
			break;
     5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <ssegWrite+0x50>
		case 8:
			buff = 0b11111110;
     5b8:	9e ef       	ldi	r25, 0xFE	; 254
			break;
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <ssegWrite+0x50>
		case 9: 
			buff = 0b11110110;
     5bc:	96 ef       	ldi	r25, 0xF6	; 246
			break;
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <ssegWrite+0x50>
		default:
			buff = 0b00000010;
     5c0:	92 e0       	ldi	r25, 0x02	; 2
			break;
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <ssegWrite+0x50>
	switch(val){
		case 0:
			buff = 0b11111100;
			break;
		case 1:
			buff = 0b01100000;
     5c4:	90 e6       	ldi	r25, 0x60	; 96
		default:
			buff = 0b00000010;
			break;
	}
		
		buff |= digit&0b00000001;
     5c6:	81 70       	andi	r24, 0x01	; 1
     5c8:	b9 2e       	mov	r11, r25
     5ca:	b8 2a       	or	r11, r24
		
		gpioWrite(sseg.port[7], sseg.pin[7], 1);
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	60 91 be 00 	lds	r22, 0x00BE
     5d2:	80 91 b5 00 	lds	r24, 0x00B5
     5d6:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(sseg.port[8], sseg.pin[8], 1);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	60 91 bf 00 	lds	r22, 0x00BF
     5e0:	80 91 b6 00 	lds	r24, 0x00B6
     5e4:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f7 eb       	ldi	r31, 0xB7	; 183
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	0e ea       	ldi	r16, 0xAE	; 174
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	c7 e0       	ldi	r28, 0x07	; 7
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t i=0; i<8; i++)
			gpioWrite(sseg.port[i], sseg.pin[i], (buff>>(7-i))&0b00000001);
     5fc:	cb 2c       	mov	r12, r11
     5fe:	d1 2c       	mov	r13, r1
     600:	f7 01       	movw	r30, r14
     602:	61 91       	ld	r22, Z+
     604:	7f 01       	movw	r14, r30
     606:	a6 01       	movw	r20, r12
     608:	0c 2e       	mov	r0, r28
     60a:	02 c0       	rjmp	.+4      	; 0x610 <ssegWrite+0x9a>
     60c:	55 95       	asr	r21
     60e:	47 95       	ror	r20
     610:	0a 94       	dec	r0
     612:	e2 f7       	brpl	.-8      	; 0x60c <ssegWrite+0x96>
     614:	41 70       	andi	r20, 0x01	; 1
     616:	f8 01       	movw	r30, r16
     618:	81 91       	ld	r24, Z+
     61a:	8f 01       	movw	r16, r30
     61c:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
     620:	21 97       	sbiw	r28, 0x01	; 1
     622:	70 f7       	brcc	.-36     	; 0x600 <ssegWrite+0x8a>
		gpioWrite(sseg.port[8], sseg.pin[8], (~buff&0b00000001));
     624:	4b 2d       	mov	r20, r11
     626:	40 95       	com	r20
     628:	41 70       	andi	r20, 0x01	; 1
     62a:	60 91 bf 00 	lds	r22, 0x00BF
     62e:	80 91 b6 00 	lds	r24, 0x00B6
     632:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	bf 90       	pop	r11
     648:	08 95       	ret

0000064a <ssegUpdate>:


void ssegUpdate(){
	if(!(sseg.flag&0b00000001)){
     64a:	80 91 c2 00 	lds	r24, 0x00C2
     64e:	80 fd       	sbrc	r24, 0
     650:	0f c0       	rjmp	.+30     	; 0x670 <ssegUpdate+0x26>
		gpioWrite(sseg.port[7], sseg.pin[7], 1);
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	60 91 be 00 	lds	r22, 0x00BE
     658:	80 91 b5 00 	lds	r24, 0x00B5
     65c:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(sseg.port[8], sseg.pin[8], 1);
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	60 91 bf 00 	lds	r22, 0x00BF
     666:	80 91 b6 00 	lds	r24, 0x00B6
     66a:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
     66e:	08 95       	ret
	//}else if(time() - sseg.t > sseg.interval){
	}else{
		if(sseg.flag&0b00000010)
     670:	81 ff       	sbrs	r24, 1
     672:	06 c0       	rjmp	.+12     	; 0x680 <ssegUpdate+0x36>
			ssegWrite(2, sseg.val[1]);
     674:	60 91 c1 00 	lds	r22, 0x00C1
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 bb 02 	call	0x576	; 0x576 <ssegWrite>
     67e:	05 c0       	rjmp	.+10     	; 0x68a <ssegUpdate+0x40>
		else
			ssegWrite(1, sseg.val[0]);
     680:	60 91 c0 00 	lds	r22, 0x00C0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 bb 02 	call	0x576	; 0x576 <ssegWrite>
		sseg.flag ^= 0b00000010;
     68a:	e2 ec       	ldi	r30, 0xC2	; 194
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	90 81       	ld	r25, Z
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	89 27       	eor	r24, r25
     694:	80 83       	st	Z, r24
     696:	08 95       	ret

00000698 <TCSInit>:
}
/*
Function:	TCSInit
Return:		1(error during TWI) or 0(no error)
*/
uint8_t TCSInit(){
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <TCSInit+0x6>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t err=0;
		
	uint8_t twiBuff[2]={0b10000001, 0xD5};	//ATIME register
     6a2:	81 e8       	ldi	r24, 0x81	; 129
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	85 ed       	ldi	r24, 0xD5	; 213
     6a8:	8a 83       	std	Y+2, r24	; 0x02
	err = twiWrite(0x29, 2, twiBuff);
     6aa:	ae 01       	movw	r20, r28
     6ac:	4f 5f       	subi	r20, 0xFF	; 255
     6ae:	5f 4f       	sbci	r21, 0xFF	; 255
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	89 e2       	ldi	r24, 0x29	; 41
     6b4:	0e 94 80 01 	call	0x300	; 0x300 <twiWrite>
	twiBuff[0] = 0b10001111;				//CONTROL register
     6b8:	8f e8       	ldi	r24, 0x8F	; 143
     6ba:	89 83       	std	Y+1, r24	; 0x01
	twiBuff[1] = 0;
     6bc:	1a 82       	std	Y+2, r1	; 0x02
	err = twiWrite(0x29, 2, twiBuff);
     6be:	ae 01       	movw	r20, r28
     6c0:	4f 5f       	subi	r20, 0xFF	; 255
     6c2:	5f 4f       	sbci	r21, 0xFF	; 255
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	89 e2       	ldi	r24, 0x29	; 41
     6c8:	0e 94 80 01 	call	0x300	; 0x300 <twiWrite>
	return err;
	
}
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <TCSEnable>:

/*
Function:	TCSEnable
Return:		1(error during TWI) or 0(no error)
*/
uint8_t TCSEnable(){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	00 d0       	rcall	.+0      	; 0x6dc <TCSEnable+0x6>
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t twiBuff[2]={0b10000000, 0b00000011};	//ENABLE register
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	8a 83       	std	Y+2, r24	; 0x02
	delay(0.024);
     6e8:	66 ea       	ldi	r22, 0xA6	; 166
     6ea:	7b e9       	ldi	r23, 0x9B	; 155
     6ec:	84 ec       	ldi	r24, 0xC4	; 196
     6ee:	9c e3       	ldi	r25, 0x3C	; 60
     6f0:	0e 94 0f 01 	call	0x21e	; 0x21e <delay>
	return twiWrite(0x29, 2, twiBuff);
     6f4:	ae 01       	movw	r20, r28
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	62 e0       	ldi	r22, 0x02	; 2
     6fc:	89 e2       	ldi	r24, 0x29	; 41
     6fe:	0e 94 80 01 	call	0x300	; 0x300 <twiWrite>
	
}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <TCSRead>:
/*
Function:	TCSRead
Arguments:	*data		pointer to data location to store RGB values
Return:		1(error during TWI) or 0(no error)
*/
uint8_t TCSRead(uint16_t* data){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	00 d0       	rcall	.+0      	; 0x716 <TCSRead+0xa>
     716:	00 d0       	rcall	.+0      	; 0x718 <TCSRead+0xc>
     718:	00 d0       	rcall	.+0      	; 0x71a <TCSRead+0xe>
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	8c 01       	movw	r16, r24
	uint8_t err = 0;
	union{
		uint8_t twi8[6];
		uint16_t twi16[3];
	}twiu;
	err = twiCombine(0x29, 0b10110110, 6, twiu.twi8);		//read 6 bytes 
     720:	9e 01       	movw	r18, r28
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	46 e0       	ldi	r20, 0x06	; 6
     728:	66 eb       	ldi	r22, 0xB6	; 182
     72a:	89 e2       	ldi	r24, 0x29	; 41
     72c:	0e 94 bb 01 	call	0x376	; 0x376 <twiCombine>
	if(!err){
     730:	81 11       	cpse	r24, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <TCSRead+0x42>
		for(uint8_t i=0; i<3; i++)
			*(data+i) = twiu.twi16[i];
     734:	29 81       	ldd	r18, Y+1	; 0x01
     736:	3a 81       	ldd	r19, Y+2	; 0x02
     738:	f8 01       	movw	r30, r16
     73a:	31 83       	std	Z+1, r19	; 0x01
     73c:	20 83       	st	Z, r18
     73e:	2b 81       	ldd	r18, Y+3	; 0x03
     740:	3c 81       	ldd	r19, Y+4	; 0x04
     742:	33 83       	std	Z+3, r19	; 0x03
     744:	22 83       	std	Z+2, r18	; 0x02
     746:	2d 81       	ldd	r18, Y+5	; 0x05
     748:	3e 81       	ldd	r19, Y+6	; 0x06
     74a:	35 83       	std	Z+5, r19	; 0x05
     74c:	24 83       	std	Z+4, r18	; 0x04
	}
	return err;
	
}
     74e:	26 96       	adiw	r28, 0x06	; 6
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <TCSRed>:


uint8_t TCSRed(uint16_t *data){
     764:	fc 01       	movw	r30, r24
	
	if((*data) > *(data+1)+10 && (*data) > *(data+2)+10)
     766:	20 81       	ld	r18, Z
     768:	31 81       	ldd	r19, Z+1	; 0x01
     76a:	82 81       	ldd	r24, Z+2	; 0x02
     76c:	93 81       	ldd	r25, Z+3	; 0x03
     76e:	0a 96       	adiw	r24, 0x0a	; 10
     770:	82 17       	cp	r24, r18
     772:	93 07       	cpc	r25, r19
     774:	50 f4       	brcc	.+20     	; 0x78a <TCSRed+0x26>
     776:	44 81       	ldd	r20, Z+4	; 0x04
     778:	55 81       	ldd	r21, Z+5	; 0x05
     77a:	46 5f       	subi	r20, 0xF6	; 246
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	42 17       	cp	r20, r18
     782:	53 07       	cpc	r21, r19
     784:	18 f0       	brcs	.+6      	; 0x78c <TCSRed+0x28>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 95       	ret
		return 1;
	else
		return 0;
     78a:	80 e0       	ldi	r24, 0x00	; 0
	
}
     78c:	08 95       	ret

0000078e <MPUInit>:

uint8_t MPUInit(){
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <MPUInit+0x6>
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	
	delay(0.03);
     798:	6f e8       	ldi	r22, 0x8F	; 143
     79a:	72 ec       	ldi	r23, 0xC2	; 194
     79c:	85 ef       	ldi	r24, 0xF5	; 245
     79e:	9c e3       	ldi	r25, 0x3C	; 60
     7a0:	0e 94 0f 01 	call	0x21e	; 0x21e <delay>
	
	uint8_t twiBuff[2]={107, 0x04};	//PWR_MGMT_1 register
     7a4:	8b e6       	ldi	r24, 0x6B	; 107
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	8a 83       	std	Y+2, r24	; 0x02
		
	return twiWrite(0b1101000, 2, twiBuff);
     7ac:	ae 01       	movw	r20, r28
     7ae:	4f 5f       	subi	r20, 0xFF	; 255
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	88 e6       	ldi	r24, 0x68	; 104
     7b6:	0e 94 80 01 	call	0x300	; 0x300 <twiWrite>
	
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <MPURead>:

void MPURead(float* data){
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <MPURead+0xa>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	8c 01       	movw	r16, r24
	uint8_t buf[2];
	union{
		uint8_t twi8[2];
		int16_t twi16;
	}twiu;
	if(!twiCombine(0b1101000, 71, 2, buf)){
     7d4:	9e 01       	movw	r18, r28
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	42 e0       	ldi	r20, 0x02	; 2
     7dc:	67 e4       	ldi	r22, 0x47	; 71
     7de:	88 e6       	ldi	r24, 0x68	; 104
     7e0:	0e 94 bb 01 	call	0x376	; 0x376 <twiCombine>
     7e4:	81 11       	cpse	r24, r1
     7e6:	25 c0       	rjmp	.+74     	; 0x832 <MPURead+0x6e>
		
		twiu.twi8[0] = buf[1];
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
		twiu.twi8[1] = buf[0];
     7ea:	99 81       	ldd	r25, Y+1	; 0x01
		twiu.twi16 -= 85;
     7ec:	bc 01       	movw	r22, r24
     7ee:	65 55       	subi	r22, 0x55	; 85
     7f0:	71 09       	sbc	r23, r1
		*data += ((float)twiu.twi16 / 131.0) * 0.016384;
     7f2:	88 27       	eor	r24, r24
     7f4:	77 fd       	sbrc	r23, 7
     7f6:	80 95       	com	r24
     7f8:	98 2f       	mov	r25, r24
     7fa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__floatsisf>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	53 e4       	ldi	r21, 0x43	; 67
     806:	0e 94 4f 09 	call	0x129e	; 0x129e <__divsf3>
     80a:	2d eb       	ldi	r18, 0xBD	; 189
     80c:	37 e3       	ldi	r19, 0x37	; 55
     80e:	46 e8       	ldi	r20, 0x86	; 134
     810:	5c e3       	ldi	r21, 0x3C	; 60
     812:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	f8 01       	movw	r30, r16
     81c:	60 81       	ld	r22, Z
     81e:	71 81       	ldd	r23, Z+1	; 0x01
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	93 81       	ldd	r25, Z+3	; 0x03
     824:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     828:	f8 01       	movw	r30, r16
     82a:	60 83       	st	Z, r22
     82c:	71 83       	std	Z+1, r23	; 0x01
     82e:	82 83       	std	Z+2, r24	; 0x02
     830:	93 83       	std	Z+3, r25	; 0x03
		
	}
	
}
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <motor>:

void motor(int8_t motorL, int8_t motorR){
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	d8 2f       	mov	r29, r24
     846:	c6 2f       	mov	r28, r22
	
	if(motorL >= 0){
     848:	88 23       	and	r24, r24
     84a:	5c f0       	brlt	.+22     	; 0x862 <__stack+0x3>
		gpioWrite(IN1, 1);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	86 e1       	ldi	r24, 0x16	; 22
     852:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(IN2, 0);
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	65 e0       	ldi	r22, 0x05	; 5
     85a:	86 e1       	ldi	r24, 0x16	; 22
     85c:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
     860:	0b c0       	rjmp	.+22     	; 0x878 <__stack+0x19>
	}else{
		gpioWrite(IN1, 0);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	64 e0       	ldi	r22, 0x04	; 4
     866:	86 e1       	ldi	r24, 0x16	; 22
     868:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(IN2, 1);
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	86 e1       	ldi	r24, 0x16	; 22
     872:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		motorL = -motorL;
     876:	d1 95       	neg	r29
	}
	if(motorR >= 0){
     878:	cc 23       	and	r28, r28
     87a:	5c f0       	brlt	.+22     	; 0x892 <__stack+0x33>
		gpioWrite(IN3, 1);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	66 e0       	ldi	r22, 0x06	; 6
     880:	86 e1       	ldi	r24, 0x16	; 22
     882:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(IN4, 0);
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	67 e0       	ldi	r22, 0x07	; 7
     88a:	86 e1       	ldi	r24, 0x16	; 22
     88c:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
	}else{
		gpioWrite(IN3, 0);
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	66 e0       	ldi	r22, 0x06	; 6
     896:	86 e1       	ldi	r24, 0x16	; 22
     898:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		gpioWrite(IN4, 1);
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	67 e0       	ldi	r22, 0x07	; 7
     8a0:	86 e1       	ldi	r24, 0x16	; 22
     8a2:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		motorR = -motorR;
     8a6:	c1 95       	neg	r28
	}
	
	pwmSet(motorL, motorR);
     8a8:	6c 2f       	mov	r22, r28
     8aa:	8d 2f       	mov	r24, r29
     8ac:	0e 94 49 01 	call	0x292	; 0x292 <pwmSet>
	
	
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <__vector_5>:
*/

/*
Timer2 Interrupt Vector
*/
ISR(TIMER2_OVF_vect){
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
	sysTick++;				//increase system tick
     8d8:	80 91 cb 00 	lds	r24, 0x00CB
     8dc:	90 91 cc 00 	lds	r25, 0x00CC
     8e0:	a0 91 cd 00 	lds	r26, 0x00CD
     8e4:	b0 91 ce 00 	lds	r27, 0x00CE
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	a1 1d       	adc	r26, r1
     8ec:	b1 1d       	adc	r27, r1
     8ee:	80 93 cb 00 	sts	0x00CB, r24
     8f2:	90 93 cc 00 	sts	0x00CC, r25
     8f6:	a0 93 cd 00 	sts	0x00CD, r26
     8fa:	b0 93 ce 00 	sts	0x00CE, r27
	ssegUpdate();
     8fe:	0e 94 25 03 	call	0x64a	; 0x64a <ssegUpdate>
	if(state == 2){
     902:	80 91 97 00 	lds	r24, 0x0097
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	e1 f4       	brne	.+56     	; 0x942 <__vector_5+0x8c>
		TCSCount++;
     90a:	80 91 9f 00 	lds	r24, 0x009F
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	80 93 9f 00 	sts	0x009F, r24
		
		MPUCount++;
     914:	80 91 9e 00 	lds	r24, 0x009E
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 9e 00 	sts	0x009E, r24
		if(MPUCount >=2){
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	30 f0       	brcs	.+12     	; 0x92e <__vector_5+0x78>
			MPURead(&yawDat);
     922:	88 ea       	ldi	r24, 0xA8	; 168
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MPURead>
			MPUCount = 0;
     92a:	10 92 9e 00 	sts	0x009E, r1
		}

		if(TCSCount >= 20){
     92e:	80 91 9f 00 	lds	r24, 0x009F
     932:	84 31       	cpi	r24, 0x14	; 20
     934:	30 f0       	brcs	.+12     	; 0x942 <__vector_5+0x8c>
			TCSRead(TCSData);
     936:	88 e9       	ldi	r24, 0x98	; 152
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 86 03 	call	0x70c	; 0x70c <TCSRead>
			TCSCount = 0;
     93e:	10 92 9f 00 	sts	0x009F, r1
		}
		
	}
}
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	7f 91       	pop	r23
     950:	6f 91       	pop	r22
     952:	5f 91       	pop	r21
     954:	4f 91       	pop	r20
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <Init>:
		
    }
	
}

void Init(){
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	62 97       	sbiw	r28, 0x12	; 18
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
	systemTimeInit();
     978:	0e 94 53 00 	call	0xa6	; 0xa6 <systemTimeInit>
	
	//Basic Functions
	gpioInit(IRl, input, pullup);		
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	63 e0       	ldi	r22, 0x03	; 3
     982:	86 e1       	ldi	r24, 0x16	; 22
     984:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(IRr, input, pullup);	
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	66 e0       	ldi	r22, 0x06	; 6
     98e:	83 e1       	ldi	r24, 0x13	; 19
     990:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(BT1, input, pullup);
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	63 e0       	ldi	r22, 0x03	; 3
     99a:	80 e1       	ldi	r24, 0x10	; 16
     99c:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(BT2, input, pullup);
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	66 e0       	ldi	r22, 0x06	; 6
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(TCSLED, output, 0);
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	62 e0       	ldi	r22, 0x02	; 2
     9b2:	86 e1       	ldi	r24, 0x16	; 22
     9b4:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(IN1, output, 0);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	64 e0       	ldi	r22, 0x04	; 4
     9be:	86 e1       	ldi	r24, 0x16	; 22
     9c0:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(IN2, output, 0);
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	65 e0       	ldi	r22, 0x05	; 5
     9ca:	86 e1       	ldi	r24, 0x16	; 22
     9cc:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(IN3, output, 0);
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	86 e1       	ldi	r24, 0x16	; 22
     9d8:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	gpioInit(IN4, output, 0);
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	67 e0       	ldi	r22, 0x07	; 7
     9e2:	86 e1       	ldi	r24, 0x16	; 22
     9e4:	0e 94 84 00 	call	0x108	; 0x108 <gpioInit>
	
	pwmInit();
     9e8:	0e 94 32 01 	call	0x264	; 0x264 <pwmInit>
	motor(0, 0);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 20 04 	call	0x840	; 0x840 <motor>
	twiInit();
     9f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <twiInit>
	uartInit();
     9f8:	0e 94 36 02 	call	0x46c	; 0x46c <uartInit>
	
	//Modules
	uint8_t sport[9] = {portA, portA, portA, portA, portA, portA, portA, portA, portC};		//abcdefg12
     9fc:	89 e0       	ldi	r24, 0x09	; 9
     9fe:	e8 e6       	ldi	r30, 0x68	; 104
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	de 01       	movw	r26, r28
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	01 90       	ld	r0, Z+
     a08:	0d 92       	st	X+, r0
     a0a:	8a 95       	dec	r24
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <Init+0xa2>
	uint8_t spin[9]  = {  0  ,   1  ,   2  ,   3  ,   4  ,   5  ,   6  ,   7  ,  7   };
     a0e:	89 e0       	ldi	r24, 0x09	; 9
     a10:	e1 e7       	ldi	r30, 0x71	; 113
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	de 01       	movw	r26, r28
     a16:	1a 96       	adiw	r26, 0x0a	; 10
     a18:	01 90       	ld	r0, Z+
     a1a:	0d 92       	st	X+, r0
     a1c:	8a 95       	dec	r24
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <Init+0xb4>
	ssegInit(sport, spin, 100);
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	48 ec       	ldi	r20, 0xC8	; 200
     a26:	52 e4       	ldi	r21, 0x42	; 66
     a28:	be 01       	movw	r22, r28
     a2a:	66 5f       	subi	r22, 0xF6	; 246
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 3f 02 	call	0x47e	; 0x47e <ssegInit>
	TCSInit();
     a36:	0e 94 4c 03 	call	0x698	; 0x698 <TCSInit>
	TCSEnable();
     a3a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <TCSEnable>
	MPUInit();
     a3e:	0e 94 c7 03 	call	0x78e	; 0x78e <MPUInit>
	
	

}
     a42:	62 96       	adiw	r28, 0x12	; 18
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <idle>:

void idle(){
	
	motor(0, 0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 20 04 	call	0x840	; 0x840 <motor>
	gpioWrite(TCSLED, 0);
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	86 e1       	ldi	r24, 0x16	; 22
     a62:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
	if(gpioReadDebounce(0)){
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioReadDebounce>
     a6c:	88 23       	and	r24, r24
     a6e:	99 f1       	breq	.+102    	; 0xad6 <idle+0x82>
		state = 2;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	80 93 97 00 	sts	0x0097, r24
		yawOffset = yawDat;
     a76:	80 91 a8 00 	lds	r24, 0x00A8
     a7a:	90 91 a9 00 	lds	r25, 0x00A9
     a7e:	a0 91 aa 00 	lds	r26, 0x00AA
     a82:	b0 91 ab 00 	lds	r27, 0x00AB
     a86:	80 93 a0 00 	sts	0x00A0, r24
     a8a:	90 93 a1 00 	sts	0x00A1, r25
     a8e:	a0 93 a2 00 	sts	0x00A2, r26
     a92:	b0 93 a3 00 	sts	0x00A3, r27
		buff = 0;
     a96:	10 92 ac 00 	sts	0x00AC, r1
		buff2 = 0;
     a9a:	10 92 ad 00 	sts	0x00AD, r1
		for(uint8_t i=0; i<6; i++)
			area[i] = 0;
     a9e:	10 92 8d 00 	sts	0x008D, r1
     aa2:	10 92 8e 00 	sts	0x008E, r1
     aa6:	10 92 8f 00 	sts	0x008F, r1
     aaa:	10 92 90 00 	sts	0x0090, r1
     aae:	10 92 91 00 	sts	0x0091, r1
     ab2:	10 92 92 00 	sts	0x0092, r1
		gpioWrite(TCSLED, 1);
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	86 e1       	ldi	r24, 0x16	; 22
     abc:	0e 94 ac 00 	call	0x158	; 0x158 <gpioWrite>
		timeElapsed = time();
     ac0:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     ac4:	60 93 93 00 	sts	0x0093, r22
     ac8:	70 93 94 00 	sts	0x0094, r23
     acc:	80 93 95 00 	sts	0x0095, r24
     ad0:	90 93 96 00 	sts	0x0096, r25
     ad4:	08 95       	ret
	}else if(gpioReadDebounce(1)){
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioReadDebounce>
     adc:	88 23       	and	r24, r24
     ade:	69 f0       	breq	.+26     	; 0xafa <idle+0xa6>
		state = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 97 00 	sts	0x0097, r24
		timeElapsed = time();
     ae6:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     aea:	60 93 93 00 	sts	0x0093, r22
     aee:	70 93 94 00 	sts	0x0094, r23
     af2:	80 93 95 00 	sts	0x0095, r24
     af6:	90 93 96 00 	sts	0x0096, r25
     afa:	08 95       	ret

00000afc <show>:
	}
	
}

void show(){
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
	
	ssegEnable(1);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 ad 02 	call	0x55a	; 0x55a <ssegEnable>
	if(!area[0]){
     b0a:	80 91 8d 00 	lds	r24, 0x008D
     b0e:	81 11       	cpse	r24, r1
     b10:	1e c0       	rjmp	.+60     	; 0xb4e <show+0x52>
		sseg.flag &= 0b11111110;
		
}

void ssegSet(uint8_t digit, uint8_t val){
	sseg.val[digit-1] = val;
     b12:	8a e0       	ldi	r24, 0x0A	; 10
     b14:	80 93 c0 00 	sts	0x00C0, r24
     b18:	80 93 c1 00 	sts	0x00C1, r24
		ssegSet(1, 10);
		ssegSet(2, 10);
		while(time() - timeElapsed < 1 && !gpioReadDebounce(1));
     b1c:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     b20:	20 91 93 00 	lds	r18, 0x0093
     b24:	30 91 94 00 	lds	r19, 0x0094
     b28:	40 91 95 00 	lds	r20, 0x0095
     b2c:	50 91 96 00 	lds	r21, 0x0096
     b30:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     b40:	88 23       	and	r24, r24
     b42:	2c f4       	brge	.+10     	; 0xb4e <show+0x52>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioReadDebounce>
     b4a:	88 23       	and	r24, r24
     b4c:	39 f3       	breq	.-50     	; 0xb1c <show+0x20>
	}
	buff = 0;
     b4e:	10 92 ac 00 	sts	0x00AC, r1
     b52:	00 ec       	ldi	r16, 0xC0	; 192
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	c1 ec       	ldi	r28, 0xC1	; 193
     b58:	d0 e0       	ldi	r29, 0x00	; 0
	while(area[buff]){
     b5a:	2e c0       	rjmp	.+92     	; 0xbb8 <show+0xbc>
		if(buff == 6)
     b5c:	86 30       	cpi	r24, 0x06	; 6
     b5e:	a9 f1       	breq	.+106    	; 0xbca <show+0xce>
			break;
		ssegSet(1, buff+1);
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	f8 01       	movw	r30, r16
     b64:	80 83       	st	Z, r24
     b66:	98 83       	st	Y, r25
		ssegSet(2, area[buff]);
		if(gpioReadDebounce(1))
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioReadDebounce>
     b6e:	81 11       	cpse	r24, r1
     b70:	2c c0       	rjmp	.+88     	; 0xbca <show+0xce>
		break;
		
		if(time() - timeElapsed >= 1){
     b72:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     b76:	20 91 93 00 	lds	r18, 0x0093
     b7a:	30 91 94 00 	lds	r19, 0x0094
     b7e:	40 91 95 00 	lds	r20, 0x0095
     b82:	50 91 96 00 	lds	r21, 0x0096
     b86:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e8       	ldi	r20, 0x80	; 128
     b90:	5f e3       	ldi	r21, 0x3F	; 63
     b92:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     b96:	88 23       	and	r24, r24
     b98:	7c f0       	brlt	.+30     	; 0xbb8 <show+0xbc>
			timeElapsed = time();
     b9a:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     b9e:	60 93 93 00 	sts	0x0093, r22
     ba2:	70 93 94 00 	sts	0x0094, r23
     ba6:	80 93 95 00 	sts	0x0095, r24
     baa:	90 93 96 00 	sts	0x0096, r25
			buff++;
     bae:	80 91 ac 00 	lds	r24, 0x00AC
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	80 93 ac 00 	sts	0x00AC, r24
		ssegSet(1, 10);
		ssegSet(2, 10);
		while(time() - timeElapsed < 1 && !gpioReadDebounce(1));
	}
	buff = 0;
	while(area[buff]){
     bb8:	80 91 ac 00 	lds	r24, 0x00AC
     bbc:	e8 2f       	mov	r30, r24
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e3 57       	subi	r30, 0x73	; 115
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	90 81       	ld	r25, Z
     bc6:	91 11       	cpse	r25, r1
     bc8:	c9 cf       	rjmp	.-110    	; 0xb5c <show+0x60>
			timeElapsed = time();
			buff++;
		}
	}
	
	state = 0;
     bca:	10 92 97 00 	sts	0x0097, r1
	ssegEnable(0);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 ad 02 	call	0x55a	; 0x55a <ssegEnable>
	
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <run>:

void run(){
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
	static uint8_t flag = 0;	//4- box 3 turn   3-RGB already sense     2-RGB not pass area     1-IRr     0- IRl   
	static float IRTime = 0;
	static float boxTime = 0;
	static float turnTime = 0;
	
	yaw = yawDat - yawOffset;
     bee:	20 91 a0 00 	lds	r18, 0x00A0
     bf2:	30 91 a1 00 	lds	r19, 0x00A1
     bf6:	40 91 a2 00 	lds	r20, 0x00A2
     bfa:	50 91 a3 00 	lds	r21, 0x00A3
     bfe:	60 91 a8 00 	lds	r22, 0x00A8
     c02:	70 91 a9 00 	lds	r23, 0x00A9
     c06:	80 91 aa 00 	lds	r24, 0x00AA
     c0a:	90 91 ab 00 	lds	r25, 0x00AB
     c0e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     c12:	60 93 a4 00 	sts	0x00A4, r22
     c16:	70 93 a5 00 	sts	0x00A5, r23
     c1a:	80 93 a6 00 	sts	0x00A6, r24
     c1e:	90 93 a7 00 	sts	0x00A7, r25
	
	if(gpioReadDebounce(0) || buff == 7){
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioReadDebounce>
     c28:	81 11       	cpse	r24, r1
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <run+0x56>
     c2c:	80 91 ac 00 	lds	r24, 0x00AC
     c30:	87 30       	cpi	r24, 0x07	; 7
     c32:	61 f4       	brne	.+24     	; 0xc4c <run+0x6e>
		state = 0;
     c34:	10 92 97 00 	sts	0x0097, r1
		flag = 0;
     c38:	10 92 8a 00 	sts	0x008A, r1
		angleOffset = 0;
     c3c:	10 92 86 00 	sts	0x0086, r1
     c40:	10 92 87 00 	sts	0x0087, r1
     c44:	10 92 88 00 	sts	0x0088, r1
     c48:	10 92 89 00 	sts	0x0089, r1
	}
		
	if(time() - IRTime > 1)
     c4c:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     c50:	20 91 82 00 	lds	r18, 0x0082
     c54:	30 91 83 00 	lds	r19, 0x0083
     c58:	40 91 84 00 	lds	r20, 0x0084
     c5c:	50 91 85 00 	lds	r21, 0x0085
     c60:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     c70:	18 16       	cp	r1, r24
     c72:	2c f4       	brge	.+10     	; 0xc7e <run+0xa0>
		flag &= 0b11111100;
     c74:	80 91 8a 00 	lds	r24, 0x008A
     c78:	8c 7f       	andi	r24, 0xFC	; 252
     c7a:	80 93 8a 00 	sts	0x008A, r24
	
	
	if(!(flag & 0b00001100) && buff > 0 && TCSRed(TCSData)){
     c7e:	c0 91 8a 00 	lds	r28, 0x008A
     c82:	8c 2f       	mov	r24, r28
     c84:	8c 70       	andi	r24, 0x0C	; 12
     c86:	b9 f4       	brne	.+46     	; 0xcb6 <run+0xd8>
     c88:	d0 91 ac 00 	lds	r29, 0x00AC
     c8c:	dd 23       	and	r29, r29
     c8e:	99 f0       	breq	.+38     	; 0xcb6 <run+0xd8>
     c90:	88 e9       	ldi	r24, 0x98	; 152
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 b2 03 	call	0x764	; 0x764 <TCSRed>
     c98:	88 23       	and	r24, r24
     c9a:	69 f0       	breq	.+26     	; 0xcb6 <run+0xd8>
		area[buff2++] = buff;
     c9c:	e0 91 ad 00 	lds	r30, 0x00AD
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8e 0f       	add	r24, r30
     ca4:	80 93 ad 00 	sts	0x00AD, r24
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	e3 57       	subi	r30, 0x73	; 115
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d0 83       	st	Z, r29
		flag |= 0b00001000;
     cb0:	c8 60       	ori	r28, 0x08	; 8
     cb2:	c0 93 8a 00 	sts	0x008A, r28
	}
	
	
	if(flag & 0b00010000){
     cb6:	10 91 8a 00 	lds	r17, 0x008A
     cba:	14 ff       	sbrs	r17, 4
     cbc:	8d c0       	rjmp	.+282    	; 0xdd8 <run+0x1fa>
		
		angleOffset = yaw;
     cbe:	80 91 a4 00 	lds	r24, 0x00A4
     cc2:	90 91 a5 00 	lds	r25, 0x00A5
     cc6:	a0 91 a6 00 	lds	r26, 0x00A6
     cca:	b0 91 a7 00 	lds	r27, 0x00A7
     cce:	80 93 86 00 	sts	0x0086, r24
     cd2:	90 93 87 00 	sts	0x0087, r25
     cd6:	a0 93 88 00 	sts	0x0088, r26
     cda:	b0 93 89 00 	sts	0x0089, r27
		if(time() - turnTime < 0.7){
     cde:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     ce2:	c0 90 7e 00 	lds	r12, 0x007E
     ce6:	d0 90 7f 00 	lds	r13, 0x007F
     cea:	e0 90 80 00 	lds	r14, 0x0080
     cee:	f0 90 81 00 	lds	r15, 0x0081
     cf2:	a7 01       	movw	r20, r14
     cf4:	96 01       	movw	r18, r12
     cf6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     cfa:	23 e3       	ldi	r18, 0x33	; 51
     cfc:	33 e3       	ldi	r19, 0x33	; 51
     cfe:	43 e3       	ldi	r20, 0x33	; 51
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	0c f4       	brge	.+2      	; 0xd0c <run+0x12e>
     d0a:	c7 c1       	rjmp	.+910    	; 0x109a <run+0x4bc>
			motorL = motorR = -40;
		}else if(flag & 0b01000000){
     d0c:	16 ff       	sbrs	r17, 6
     d0e:	30 c0       	rjmp	.+96     	; 0xd70 <run+0x192>
			if(time() - turnTime < 0.5){
     d10:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     d14:	a7 01       	movw	r20, r14
     d16:	96 01       	movw	r18, r12
     d18:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     d28:	88 23       	and	r24, r24
     d2a:	0c f4       	brge	.+2      	; 0xd2e <run+0x150>
     d2c:	b9 c1       	rjmp	.+882    	; 0x10a0 <run+0x4c2>
				motorL = motorR = 0;
			}else if(time() - turnTime < 1){
     d2e:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     d32:	a7 01       	movw	r20, r14
     d34:	96 01       	movw	r18, r12
     d36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e8       	ldi	r20, 0x80	; 128
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     d46:	88 23       	and	r24, r24
     d48:	0c f4       	brge	.+2      	; 0xd4c <run+0x16e>
     d4a:	ad c1       	rjmp	.+858    	; 0x10a6 <run+0x4c8>
				motorL = motorR = -40;
			}else{
				flag &= 0b11101111;
     d4c:	1f 7e       	andi	r17, 0xEF	; 239
     d4e:	10 93 8a 00 	sts	0x008A, r17
				angleOffset = 90;
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a4 eb       	ldi	r26, 0xB4	; 180
     d58:	b2 e4       	ldi	r27, 0x42	; 66
     d5a:	80 93 86 00 	sts	0x0086, r24
     d5e:	90 93 87 00 	sts	0x0087, r25
     d62:	a0 93 88 00 	sts	0x0088, r26
     d66:	b0 93 89 00 	sts	0x0089, r27
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
     d6a:	d8 e2       	ldi	r29, 0x28	; 40
     d6c:	c8 e2       	ldi	r28, 0x28	; 40
     d6e:	b5 c1       	rjmp	.+874    	; 0x10da <run+0x4fc>
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
			if(90.0 - yaw < 3 && 90.0 - yaw > -3){
     d70:	20 91 a4 00 	lds	r18, 0x00A4
     d74:	30 91 a5 00 	lds	r19, 0x00A5
     d78:	40 91 a6 00 	lds	r20, 0x00A6
     d7c:	50 91 a7 00 	lds	r21, 0x00A7
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	84 eb       	ldi	r24, 0xB4	; 180
     d86:	92 e4       	ldi	r25, 0x42	; 66
     d88:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e4       	ldi	r20, 0x40	; 64
     d96:	50 e4       	ldi	r21, 0x40	; 64
     d98:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	0c f0       	brlt	.+2      	; 0xda2 <run+0x1c4>
     da0:	85 c1       	rjmp	.+778    	; 0x10ac <run+0x4ce>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e4       	ldi	r20, 0x40	; 64
     da8:	50 ec       	ldi	r21, 0xC0	; 192
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     db2:	18 16       	cp	r1, r24
     db4:	0c f0       	brlt	.+2      	; 0xdb8 <run+0x1da>
     db6:	7d c1       	rjmp	.+762    	; 0x10b2 <run+0x4d4>
				flag |= 0b01000000;
     db8:	10 64       	ori	r17, 0x40	; 64
     dba:	10 93 8a 00 	sts	0x008A, r17
				turnTime = time();
     dbe:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     dc2:	60 93 7e 00 	sts	0x007E, r22
     dc6:	70 93 7f 00 	sts	0x007F, r23
     dca:	80 93 80 00 	sts	0x0080, r24
     dce:	90 93 81 00 	sts	0x0081, r25
				motorR = -40;
     dd2:	d8 ed       	ldi	r29, 0xD8	; 216
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
     dd4:	c8 ed       	ldi	r28, 0xD8	; 216
     dd6:	81 c1       	rjmp	.+770    	; 0x10da <run+0x4fc>
				turnTime = time();
				motorR = -40;
			}
		}
		
	}else if(flag & 0b00100000){
     dd8:	15 ff       	sbrs	r17, 5
     dda:	8d c0       	rjmp	.+282    	; 0xef6 <run+0x318>
		
		angleOffset = yaw;
     ddc:	80 91 a4 00 	lds	r24, 0x00A4
     de0:	90 91 a5 00 	lds	r25, 0x00A5
     de4:	a0 91 a6 00 	lds	r26, 0x00A6
     de8:	b0 91 a7 00 	lds	r27, 0x00A7
     dec:	80 93 86 00 	sts	0x0086, r24
     df0:	90 93 87 00 	sts	0x0087, r25
     df4:	a0 93 88 00 	sts	0x0088, r26
     df8:	b0 93 89 00 	sts	0x0089, r27
		if(time() - turnTime < 0.7){
     dfc:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     e00:	c0 90 7e 00 	lds	r12, 0x007E
     e04:	d0 90 7f 00 	lds	r13, 0x007F
     e08:	e0 90 80 00 	lds	r14, 0x0080
     e0c:	f0 90 81 00 	lds	r15, 0x0081
     e10:	a7 01       	movw	r20, r14
     e12:	96 01       	movw	r18, r12
     e14:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     e18:	23 e3       	ldi	r18, 0x33	; 51
     e1a:	33 e3       	ldi	r19, 0x33	; 51
     e1c:	43 e3       	ldi	r20, 0x33	; 51
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     e24:	88 23       	and	r24, r24
     e26:	0c f4       	brge	.+2      	; 0xe2a <run+0x24c>
     e28:	47 c1       	rjmp	.+654    	; 0x10b8 <run+0x4da>
			motorL = motorR = -40;
		}else if(flag & 0b10000000){
     e2a:	11 23       	and	r17, r17
     e2c:	84 f5       	brge	.+96     	; 0xe8e <run+0x2b0>
			if(time() - turnTime < 0.5){
     e2e:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     e32:	a7 01       	movw	r20, r14
     e34:	96 01       	movw	r18, r12
     e36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     e46:	88 23       	and	r24, r24
     e48:	0c f4       	brge	.+2      	; 0xe4c <run+0x26e>
     e4a:	39 c1       	rjmp	.+626    	; 0x10be <run+0x4e0>
				motorL = motorR = 0;
			}else if(time() - turnTime < 1){
     e4c:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     e50:	a7 01       	movw	r20, r14
     e52:	96 01       	movw	r18, r12
     e54:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     e64:	88 23       	and	r24, r24
     e66:	0c f4       	brge	.+2      	; 0xe6a <run+0x28c>
     e68:	2d c1       	rjmp	.+602    	; 0x10c4 <run+0x4e6>
				motorL = motorR = -40;
			}else{
				flag &= 0b11101111;
     e6a:	1f 7e       	andi	r17, 0xEF	; 239
     e6c:	10 93 8a 00 	sts	0x008A, r17
				angleOffset = 90;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a4 eb       	ldi	r26, 0xB4	; 180
     e76:	b2 e4       	ldi	r27, 0x42	; 66
     e78:	80 93 86 00 	sts	0x0086, r24
     e7c:	90 93 87 00 	sts	0x0087, r25
     e80:	a0 93 88 00 	sts	0x0088, r26
     e84:	b0 93 89 00 	sts	0x0089, r27
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
     e88:	d8 e2       	ldi	r29, 0x28	; 40
     e8a:	c8 e2       	ldi	r28, 0x28	; 40
     e8c:	26 c1       	rjmp	.+588    	; 0x10da <run+0x4fc>
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
			if(180.0 - yaw < 3 && 180.0 - yaw > -3){
     e8e:	20 91 a4 00 	lds	r18, 0x00A4
     e92:	30 91 a5 00 	lds	r19, 0x00A5
     e96:	40 91 a6 00 	lds	r20, 0x00A6
     e9a:	50 91 a7 00 	lds	r21, 0x00A7
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	84 e3       	ldi	r24, 0x34	; 52
     ea4:	93 e4       	ldi	r25, 0x43	; 67
     ea6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     eaa:	6b 01       	movw	r12, r22
     eac:	7c 01       	movw	r14, r24
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e4       	ldi	r20, 0x40	; 64
     eb4:	50 e4       	ldi	r21, 0x40	; 64
     eb6:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <run+0x2e2>
     ebe:	05 c1       	rjmp	.+522    	; 0x10ca <run+0x4ec>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e4       	ldi	r20, 0x40	; 64
     ec6:	50 ec       	ldi	r21, 0xC0	; 192
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <run+0x2f8>
     ed4:	fd c0       	rjmp	.+506    	; 0x10d0 <run+0x4f2>
				flag |= 0b10000000;
     ed6:	10 68       	ori	r17, 0x80	; 128
     ed8:	10 93 8a 00 	sts	0x008A, r17
				turnTime = time();
     edc:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     ee0:	60 93 7e 00 	sts	0x007E, r22
     ee4:	70 93 7f 00 	sts	0x007F, r23
     ee8:	80 93 80 00 	sts	0x0080, r24
     eec:	90 93 81 00 	sts	0x0081, r25
				motorR = -40;
     ef0:	d8 ed       	ldi	r29, 0xD8	; 216
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
     ef2:	c8 ed       	ldi	r28, 0xD8	; 216
     ef4:	f2 c0       	rjmp	.+484    	; 0x10da <run+0x4fc>
				turnTime = time();
				motorR = -40;
			}
		}
		
	}else if(time() - boxTime > 0.5){
     ef6:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     efa:	20 91 7a 00 	lds	r18, 0x007A
     efe:	30 91 7b 00 	lds	r19, 0x007B
     f02:	40 91 7c 00 	lds	r20, 0x007C
     f06:	50 91 7d 00 	lds	r21, 0x007D
     f0a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__gesf2>
     f1a:	18 16       	cp	r1, r24
     f1c:	0c f0       	brlt	.+2      	; 0xf20 <run+0x342>
     f1e:	ac c0       	rjmp	.+344    	; 0x1078 <run+0x49a>
		ssegEnable(0);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 ad 02 	call	0x55a	; 0x55a <ssegEnable>
		if(flag&0b00000100){
     f26:	12 ff       	sbrs	r17, 2
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <run+0x35c>
			buff++;
     f2a:	80 91 ac 00 	lds	r24, 0x00AC
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 ac 00 	sts	0x00AC, r24
			flag &= 0b11110000;
     f34:	10 7f       	andi	r17, 0xF0	; 240
     f36:	10 93 8a 00 	sts	0x008A, r17
		}
		
		if(gpioRead(IRl)){
     f3a:	b3 9b       	sbis	0x16, 3	; 22
     f3c:	49 c0       	rjmp	.+146    	; 0xfd0 <run+0x3f2>
			if(flag&0b00000010)	{
     f3e:	c0 91 8a 00 	lds	r28, 0x008A
     f42:	c1 ff       	sbrs	r28, 1
     f44:	38 c0       	rjmp	.+112    	; 0xfb6 <run+0x3d8>
				flag &= 0b11111100;
     f46:	dc 2f       	mov	r29, r28
     f48:	dc 7f       	andi	r29, 0xFC	; 252
     f4a:	d0 93 8a 00 	sts	0x008A, r29
				if(buff == 3 && !(flag & 0b01000000)){
     f4e:	80 91 ac 00 	lds	r24, 0x00AC
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	81 f4       	brne	.+32     	; 0xf76 <run+0x398>
     f56:	c6 fd       	sbrc	r28, 6
     f58:	20 c0       	rjmp	.+64     	; 0xf9a <run+0x3bc>
					flag |= 0b00010000;
     f5a:	d0 61       	ori	r29, 0x10	; 16
     f5c:	d0 93 8a 00 	sts	0x008A, r29
					turnTime = time();
     f60:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     f64:	60 93 7e 00 	sts	0x007E, r22
     f68:	70 93 7f 00 	sts	0x007F, r23
     f6c:	80 93 80 00 	sts	0x0080, r24
     f70:	90 93 81 00 	sts	0x0081, r25
     f74:	2d c0       	rjmp	.+90     	; 0xfd0 <run+0x3f2>
				}else if(buff == 4 && !(flag & 0b10000000)){
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	81 f4       	brne	.+32     	; 0xf9a <run+0x3bc>
     f7a:	dd 23       	and	r29, r29
     f7c:	74 f0       	brlt	.+28     	; 0xf9a <run+0x3bc>
					flag |= 0b00100000;
     f7e:	d0 62       	ori	r29, 0x20	; 32
     f80:	d0 93 8a 00 	sts	0x008A, r29
					turnTime = time();	
     f84:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     f88:	60 93 7e 00 	sts	0x007E, r22
     f8c:	70 93 7f 00 	sts	0x007F, r23
     f90:	80 93 80 00 	sts	0x0080, r24
     f94:	90 93 81 00 	sts	0x0081, r25
     f98:	1b c0       	rjmp	.+54     	; 0xfd0 <run+0x3f2>
				}else{
					boxTime = time();
     f9a:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     f9e:	60 93 7a 00 	sts	0x007A, r22
     fa2:	70 93 7b 00 	sts	0x007B, r23
     fa6:	80 93 7c 00 	sts	0x007C, r24
     faa:	90 93 7d 00 	sts	0x007D, r25
					flag |= 0b00000100;
     fae:	d4 60       	ori	r29, 0x04	; 4
     fb0:	d0 93 8a 00 	sts	0x008A, r29
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <run+0x3f2>
				}
			}else{
				IRTime = time();
     fb6:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     fba:	60 93 82 00 	sts	0x0082, r22
     fbe:	70 93 83 00 	sts	0x0083, r23
     fc2:	80 93 84 00 	sts	0x0084, r24
     fc6:	90 93 85 00 	sts	0x0085, r25
				flag |= 0b00000001;
     fca:	c1 60       	ori	r28, 0x01	; 1
     fcc:	c0 93 8a 00 	sts	0x008A, r28
			}
		}
		
		if(gpioRead(IRr)){
     fd0:	9e 9b       	sbis	0x13, 6	; 19
     fd2:	81 c0       	rjmp	.+258    	; 0x10d6 <run+0x4f8>
			if(flag&0b00000001)	{
     fd4:	c0 91 8a 00 	lds	r28, 0x008A
     fd8:	c0 ff       	sbrs	r28, 0
     fda:	3e c0       	rjmp	.+124    	; 0x1058 <run+0x47a>
				flag &= 0b11111100;
     fdc:	dc 2f       	mov	r29, r28
     fde:	dc 7f       	andi	r29, 0xFC	; 252
     fe0:	d0 93 8a 00 	sts	0x008A, r29
				if(buff == 3 && !(flag & 0b01000000)){
     fe4:	80 91 ac 00 	lds	r24, 0x00AC
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 f4       	brne	.+36     	; 0x1010 <run+0x432>
     fec:	c6 fd       	sbrc	r28, 6
     fee:	24 c0       	rjmp	.+72     	; 0x1038 <run+0x45a>
					flag |= 0b00010000;
     ff0:	d0 61       	ori	r29, 0x10	; 16
     ff2:	d0 93 8a 00 	sts	0x008A, r29
					turnTime = time();
     ff6:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
     ffa:	60 93 7e 00 	sts	0x007E, r22
     ffe:	70 93 7f 00 	sts	0x007F, r23
    1002:	80 93 80 00 	sts	0x0080, r24
    1006:	90 93 81 00 	sts	0x0081, r25
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    100a:	d8 e2       	ldi	r29, 0x28	; 40
    100c:	c8 e2       	ldi	r28, 0x28	; 40
		if(gpioRead(IRr)){
			if(flag&0b00000001)	{
				flag &= 0b11111100;
				if(buff == 3 && !(flag & 0b01000000)){
					flag |= 0b00010000;
					turnTime = time();
    100e:	65 c0       	rjmp	.+202    	; 0x10da <run+0x4fc>
				}else if(buff == 4 && !(flag & 0b10000000)){
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	91 f4       	brne	.+36     	; 0x1038 <run+0x45a>
    1014:	dd 23       	and	r29, r29
    1016:	84 f0       	brlt	.+32     	; 0x1038 <run+0x45a>
					flag |= 0b00100000;
    1018:	d0 62       	ori	r29, 0x20	; 32
    101a:	d0 93 8a 00 	sts	0x008A, r29
					turnTime = time();
    101e:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
    1022:	60 93 7e 00 	sts	0x007E, r22
    1026:	70 93 7f 00 	sts	0x007F, r23
    102a:	80 93 80 00 	sts	0x0080, r24
    102e:	90 93 81 00 	sts	0x0081, r25
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    1032:	d8 e2       	ldi	r29, 0x28	; 40
    1034:	c8 e2       	ldi	r28, 0x28	; 40
				if(buff == 3 && !(flag & 0b01000000)){
					flag |= 0b00010000;
					turnTime = time();
				}else if(buff == 4 && !(flag & 0b10000000)){
					flag |= 0b00100000;
					turnTime = time();
    1036:	51 c0       	rjmp	.+162    	; 0x10da <run+0x4fc>
				}else{
					boxTime = time();
    1038:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
    103c:	60 93 7a 00 	sts	0x007A, r22
    1040:	70 93 7b 00 	sts	0x007B, r23
    1044:	80 93 7c 00 	sts	0x007C, r24
    1048:	90 93 7d 00 	sts	0x007D, r25
					flag |= 0b00000100;
    104c:	d4 60       	ori	r29, 0x04	; 4
    104e:	d0 93 8a 00 	sts	0x008A, r29
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    1052:	d8 e2       	ldi	r29, 0x28	; 40
    1054:	c8 e2       	ldi	r28, 0x28	; 40
    1056:	41 c0       	rjmp	.+130    	; 0x10da <run+0x4fc>
				}else{
					boxTime = time();
					flag |= 0b00000100;
				}
			}else{
				IRTime = time();
    1058:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
    105c:	60 93 82 00 	sts	0x0082, r22
    1060:	70 93 83 00 	sts	0x0083, r23
    1064:	80 93 84 00 	sts	0x0084, r24
    1068:	90 93 85 00 	sts	0x0085, r25
				flag |= 0b00000010;
    106c:	c2 60       	ori	r28, 0x02	; 2
    106e:	c0 93 8a 00 	sts	0x008A, r28
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    1072:	d8 e2       	ldi	r29, 0x28	; 40
    1074:	c8 e2       	ldi	r28, 0x28	; 40
    1076:	31 c0       	rjmp	.+98     	; 0x10da <run+0x4fc>
				flag |= 0b00000010;
			}
		}
		
	}else{
		ssegEnable(1);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0e 94 ad 02 	call	0x55a	; 0x55a <ssegEnable>
		ssegSet(1, buff+1);
    107e:	80 91 ac 00 	lds	r24, 0x00AC
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 c0 00 	sts	0x00C0, r24
    1088:	8a e0       	ldi	r24, 0x0A	; 10
    108a:	80 93 c1 00 	sts	0x00C1, r24
		ssegSet(2, 10);
		
		flag &= 0b11111100;
    108e:	1c 7f       	andi	r17, 0xFC	; 252
    1090:	10 93 8a 00 	sts	0x008A, r17
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    1094:	d8 e2       	ldi	r29, 0x28	; 40
    1096:	c8 e2       	ldi	r28, 0x28	; 40
    1098:	20 c0       	rjmp	.+64     	; 0x10da <run+0x4fc>
	
	if(flag & 0b00010000){
		
		angleOffset = yaw;
		if(time() - turnTime < 0.7){
			motorL = motorR = -40;
    109a:	d8 ed       	ldi	r29, 0xD8	; 216
    109c:	c8 ed       	ldi	r28, 0xD8	; 216
    109e:	1d c0       	rjmp	.+58     	; 0x10da <run+0x4fc>
		}else if(flag & 0b01000000){
			if(time() - turnTime < 0.5){
				motorL = motorR = 0;
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
    10a2:	c0 e0       	ldi	r28, 0x00	; 0
    10a4:	1a c0       	rjmp	.+52     	; 0x10da <run+0x4fc>
			}else if(time() - turnTime < 1){
				motorL = motorR = -40;
    10a6:	d8 ed       	ldi	r29, 0xD8	; 216
    10a8:	c8 ed       	ldi	r28, 0xD8	; 216
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <run+0x4fc>
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    10ac:	d8 e2       	ldi	r29, 0x28	; 40
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
    10ae:	c8 ed       	ldi	r28, 0xD8	; 216
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <run+0x4fc>
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    10b2:	d8 e2       	ldi	r29, 0x28	; 40
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
    10b4:	c8 ed       	ldi	r28, 0xD8	; 216
    10b6:	11 c0       	rjmp	.+34     	; 0x10da <run+0x4fc>
		
	}else if(flag & 0b00100000){
		
		angleOffset = yaw;
		if(time() - turnTime < 0.7){
			motorL = motorR = -40;
    10b8:	d8 ed       	ldi	r29, 0xD8	; 216
    10ba:	c8 ed       	ldi	r28, 0xD8	; 216
    10bc:	0e c0       	rjmp	.+28     	; 0x10da <run+0x4fc>
		}else if(flag & 0b10000000){
			if(time() - turnTime < 0.5){
				motorL = motorR = 0;
    10be:	d0 e0       	ldi	r29, 0x00	; 0
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <run+0x4fc>
			}else if(time() - turnTime < 1){
				motorL = motorR = -40;
    10c4:	d8 ed       	ldi	r29, 0xD8	; 216
    10c6:	c8 ed       	ldi	r28, 0xD8	; 216
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <run+0x4fc>
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    10ca:	d8 e2       	ldi	r29, 0x28	; 40
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
    10cc:	c8 ed       	ldi	r28, 0xD8	; 216
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <run+0x4fc>
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    10d0:	d8 e2       	ldi	r29, 0x28	; 40
			}else{
				flag &= 0b11101111;
				angleOffset = 90;
			}
		}else{
			motorL = -40;
    10d2:	c8 ed       	ldi	r28, 0xD8	; 216
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <run+0x4fc>
	
}

void run(){
	
	int8_t motorL = 40, motorR = 40;
    10d6:	d8 e2       	ldi	r29, 0x28	; 40
    10d8:	c8 e2       	ldi	r28, 0x28	; 40
		flag &= 0b11111100;
	}
	
	
	
	if(flag & 0b00000001)
    10da:	80 91 8a 00 	lds	r24, 0x008A
    10de:	80 ff       	sbrs	r24, 0
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <run+0x522>
		target = angleOffset-20;
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 ea       	ldi	r20, 0xA0	; 160
    10e8:	51 e4       	ldi	r21, 0x41	; 65
    10ea:	60 91 86 00 	lds	r22, 0x0086
    10ee:	70 91 87 00 	lds	r23, 0x0087
    10f2:	80 91 88 00 	lds	r24, 0x0088
    10f6:	90 91 89 00 	lds	r25, 0x0089
    10fa:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
    10fe:	19 c0       	rjmp	.+50     	; 0x1132 <run+0x554>
	else if(flag & 0b00000010)
    1100:	81 ff       	sbrs	r24, 1
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <run+0x544>
		target = angleOffset+20;
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 ea       	ldi	r20, 0xA0	; 160
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	60 91 86 00 	lds	r22, 0x0086
    1110:	70 91 87 00 	lds	r23, 0x0087
    1114:	80 91 88 00 	lds	r24, 0x0088
    1118:	90 91 89 00 	lds	r25, 0x0089
    111c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <run+0x554>
	else
		target = angleOffset;
    1122:	60 91 86 00 	lds	r22, 0x0086
    1126:	70 91 87 00 	lds	r23, 0x0087
    112a:	80 91 88 00 	lds	r24, 0x0088
    112e:	90 91 89 00 	lds	r25, 0x0089
	
	Pout = (target-yaw) * Kp;
    1132:	20 91 a4 00 	lds	r18, 0x00A4
    1136:	30 91 a5 00 	lds	r19, 0x00A5
    113a:	40 91 a6 00 	lds	r20, 0x00A6
    113e:	50 91 a7 00 	lds	r21, 0x00A7
    1142:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 ec       	ldi	r20, 0xC0	; 192
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
    1152:	0e 94 b7 09 	call	0x136e	; 0x136e <__fixsfsi>
    1156:	46 2f       	mov	r20, r22
    1158:	57 2f       	mov	r21, r23
    115a:	68 2f       	mov	r22, r24
    115c:	79 2f       	mov	r23, r25
    115e:	41 3f       	cpi	r20, 0xF1	; 241
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	58 07       	cpc	r21, r24
    1164:	68 07       	cpc	r22, r24
    1166:	78 07       	cpc	r23, r24
    1168:	24 f4       	brge	.+8      	; 0x1172 <run+0x594>
    116a:	41 ef       	ldi	r20, 0xF1	; 241
    116c:	5f ef       	ldi	r21, 0xFF	; 255
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	8a 01       	movw	r16, r20
    1174:	9b 01       	movw	r18, r22
    1176:	40 31       	cpi	r20, 0x10	; 16
    1178:	51 05       	cpc	r21, r1
    117a:	61 05       	cpc	r22, r1
    117c:	71 05       	cpc	r23, r1
    117e:	24 f0       	brlt	.+8      	; 0x1188 <run+0x5aa>
    1180:	0f e0       	ldi	r16, 0x0F	; 15
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
		Pout = Mp;
	else if(Pout < -Mp)
		Pout = -Mp;
	
	motorL -= Pout;
	motorR += Pout;
    1188:	6d 2f       	mov	r22, r29
    118a:	60 0f       	add	r22, r16
	
	motor(motorL, motorR);
    118c:	8c 2f       	mov	r24, r28
    118e:	80 1b       	sub	r24, r16
    1190:	0e 94 20 04 	call	0x840	; 0x840 <motor>
	
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret

000011a6 <main>:


int main(void)
{
	
	Init();
    11a6:	0e 94 b2 04 	call	0x964	; 0x964 <Init>
		delay(0.5);
*/
	


		if(!state){
    11aa:	80 91 97 00 	lds	r24, 0x0097
    11ae:	81 11       	cpse	r24, r1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <main+0x12>
			
			idle();
    11b2:	0e 94 2a 05 	call	0xa54	; 0xa54 <idle>
    11b6:	f9 cf       	rjmp	.-14     	; 0x11aa <main+0x4>
			
		}else if(state == 1){
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <main+0x1c>
			
			show();
    11bc:	0e 94 7e 05 	call	0xafc	; 0xafc <show>
    11c0:	f4 cf       	rjmp	.-24     	; 0x11aa <main+0x4>
			
		}else if(state == 2){	
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	91 f7       	brne	.-28     	; 0x11aa <main+0x4>
			
			run();
    11c6:	0e 94 ef 05 	call	0xbde	; 0xbde <run>
    11ca:	ef cf       	rjmp	.-34     	; 0x11aa <main+0x4>

000011cc <__subsf3>:
    11cc:	50 58       	subi	r21, 0x80	; 128

000011ce <__addsf3>:
    11ce:	bb 27       	eor	r27, r27
    11d0:	aa 27       	eor	r26, r26
    11d2:	0e d0       	rcall	.+28     	; 0x11f0 <__addsf3x>
    11d4:	75 c1       	rjmp	.+746    	; 0x14c0 <__fp_round>
    11d6:	66 d1       	rcall	.+716    	; 0x14a4 <__fp_pscA>
    11d8:	30 f0       	brcs	.+12     	; 0x11e6 <__addsf3+0x18>
    11da:	6b d1       	rcall	.+726    	; 0x14b2 <__fp_pscB>
    11dc:	20 f0       	brcs	.+8      	; 0x11e6 <__addsf3+0x18>
    11de:	31 f4       	brne	.+12     	; 0x11ec <__addsf3+0x1e>
    11e0:	9f 3f       	cpi	r25, 0xFF	; 255
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <__addsf3+0x1a>
    11e4:	1e f4       	brtc	.+6      	; 0x11ec <__addsf3+0x1e>
    11e6:	5b c1       	rjmp	.+694    	; 0x149e <__fp_nan>
    11e8:	0e f4       	brtc	.+2      	; 0x11ec <__addsf3+0x1e>
    11ea:	e0 95       	com	r30
    11ec:	e7 fb       	bst	r30, 7
    11ee:	51 c1       	rjmp	.+674    	; 0x1492 <__fp_inf>

000011f0 <__addsf3x>:
    11f0:	e9 2f       	mov	r30, r25
    11f2:	77 d1       	rcall	.+750    	; 0x14e2 <__fp_split3>
    11f4:	80 f3       	brcs	.-32     	; 0x11d6 <__addsf3+0x8>
    11f6:	ba 17       	cp	r27, r26
    11f8:	62 07       	cpc	r22, r18
    11fa:	73 07       	cpc	r23, r19
    11fc:	84 07       	cpc	r24, r20
    11fe:	95 07       	cpc	r25, r21
    1200:	18 f0       	brcs	.+6      	; 0x1208 <__addsf3x+0x18>
    1202:	71 f4       	brne	.+28     	; 0x1220 <__addsf3x+0x30>
    1204:	9e f5       	brtc	.+102    	; 0x126c <__addsf3x+0x7c>
    1206:	8f c1       	rjmp	.+798    	; 0x1526 <__fp_zero>
    1208:	0e f4       	brtc	.+2      	; 0x120c <__addsf3x+0x1c>
    120a:	e0 95       	com	r30
    120c:	0b 2e       	mov	r0, r27
    120e:	ba 2f       	mov	r27, r26
    1210:	a0 2d       	mov	r26, r0
    1212:	0b 01       	movw	r0, r22
    1214:	b9 01       	movw	r22, r18
    1216:	90 01       	movw	r18, r0
    1218:	0c 01       	movw	r0, r24
    121a:	ca 01       	movw	r24, r20
    121c:	a0 01       	movw	r20, r0
    121e:	11 24       	eor	r1, r1
    1220:	ff 27       	eor	r31, r31
    1222:	59 1b       	sub	r21, r25
    1224:	99 f0       	breq	.+38     	; 0x124c <__addsf3x+0x5c>
    1226:	59 3f       	cpi	r21, 0xF9	; 249
    1228:	50 f4       	brcc	.+20     	; 0x123e <__addsf3x+0x4e>
    122a:	50 3e       	cpi	r21, 0xE0	; 224
    122c:	68 f1       	brcs	.+90     	; 0x1288 <__addsf3x+0x98>
    122e:	1a 16       	cp	r1, r26
    1230:	f0 40       	sbci	r31, 0x00	; 0
    1232:	a2 2f       	mov	r26, r18
    1234:	23 2f       	mov	r18, r19
    1236:	34 2f       	mov	r19, r20
    1238:	44 27       	eor	r20, r20
    123a:	58 5f       	subi	r21, 0xF8	; 248
    123c:	f3 cf       	rjmp	.-26     	; 0x1224 <__addsf3x+0x34>
    123e:	46 95       	lsr	r20
    1240:	37 95       	ror	r19
    1242:	27 95       	ror	r18
    1244:	a7 95       	ror	r26
    1246:	f0 40       	sbci	r31, 0x00	; 0
    1248:	53 95       	inc	r21
    124a:	c9 f7       	brne	.-14     	; 0x123e <__addsf3x+0x4e>
    124c:	7e f4       	brtc	.+30     	; 0x126c <__addsf3x+0x7c>
    124e:	1f 16       	cp	r1, r31
    1250:	ba 0b       	sbc	r27, r26
    1252:	62 0b       	sbc	r22, r18
    1254:	73 0b       	sbc	r23, r19
    1256:	84 0b       	sbc	r24, r20
    1258:	ba f0       	brmi	.+46     	; 0x1288 <__addsf3x+0x98>
    125a:	91 50       	subi	r25, 0x01	; 1
    125c:	a1 f0       	breq	.+40     	; 0x1286 <__addsf3x+0x96>
    125e:	ff 0f       	add	r31, r31
    1260:	bb 1f       	adc	r27, r27
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	c2 f7       	brpl	.-16     	; 0x125a <__addsf3x+0x6a>
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <__addsf3x+0x98>
    126c:	ba 0f       	add	r27, r26
    126e:	62 1f       	adc	r22, r18
    1270:	73 1f       	adc	r23, r19
    1272:	84 1f       	adc	r24, r20
    1274:	48 f4       	brcc	.+18     	; 0x1288 <__addsf3x+0x98>
    1276:	87 95       	ror	r24
    1278:	77 95       	ror	r23
    127a:	67 95       	ror	r22
    127c:	b7 95       	ror	r27
    127e:	f7 95       	ror	r31
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	08 f0       	brcs	.+2      	; 0x1286 <__addsf3x+0x96>
    1284:	b3 cf       	rjmp	.-154    	; 0x11ec <__addsf3+0x1e>
    1286:	93 95       	inc	r25
    1288:	88 0f       	add	r24, r24
    128a:	08 f0       	brcs	.+2      	; 0x128e <__addsf3x+0x9e>
    128c:	99 27       	eor	r25, r25
    128e:	ee 0f       	add	r30, r30
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	08 95       	ret

00001296 <__cmpsf2>:
    1296:	d9 d0       	rcall	.+434    	; 0x144a <__fp_cmp>
    1298:	08 f4       	brcc	.+2      	; 0x129c <__cmpsf2+0x6>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	08 95       	ret

0000129e <__divsf3>:
    129e:	0c d0       	rcall	.+24     	; 0x12b8 <__divsf3x>
    12a0:	0f c1       	rjmp	.+542    	; 0x14c0 <__fp_round>
    12a2:	07 d1       	rcall	.+526    	; 0x14b2 <__fp_pscB>
    12a4:	40 f0       	brcs	.+16     	; 0x12b6 <__divsf3+0x18>
    12a6:	fe d0       	rcall	.+508    	; 0x14a4 <__fp_pscA>
    12a8:	30 f0       	brcs	.+12     	; 0x12b6 <__divsf3+0x18>
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <__divsf3+0x16>
    12ac:	5f 3f       	cpi	r21, 0xFF	; 255
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <__divsf3+0x18>
    12b0:	f0 c0       	rjmp	.+480    	; 0x1492 <__fp_inf>
    12b2:	51 11       	cpse	r21, r1
    12b4:	39 c1       	rjmp	.+626    	; 0x1528 <__fp_szero>
    12b6:	f3 c0       	rjmp	.+486    	; 0x149e <__fp_nan>

000012b8 <__divsf3x>:
    12b8:	14 d1       	rcall	.+552    	; 0x14e2 <__fp_split3>
    12ba:	98 f3       	brcs	.-26     	; 0x12a2 <__divsf3+0x4>

000012bc <__divsf3_pse>:
    12bc:	99 23       	and	r25, r25
    12be:	c9 f3       	breq	.-14     	; 0x12b2 <__divsf3+0x14>
    12c0:	55 23       	and	r21, r21
    12c2:	b1 f3       	breq	.-20     	; 0x12b0 <__divsf3+0x12>
    12c4:	95 1b       	sub	r25, r21
    12c6:	55 0b       	sbc	r21, r21
    12c8:	bb 27       	eor	r27, r27
    12ca:	aa 27       	eor	r26, r26
    12cc:	62 17       	cp	r22, r18
    12ce:	73 07       	cpc	r23, r19
    12d0:	84 07       	cpc	r24, r20
    12d2:	38 f0       	brcs	.+14     	; 0x12e2 <__divsf3_pse+0x26>
    12d4:	9f 5f       	subi	r25, 0xFF	; 255
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	44 1f       	adc	r20, r20
    12de:	aa 1f       	adc	r26, r26
    12e0:	a9 f3       	breq	.-22     	; 0x12cc <__divsf3_pse+0x10>
    12e2:	33 d0       	rcall	.+102    	; 0x134a <__divsf3_pse+0x8e>
    12e4:	0e 2e       	mov	r0, r30
    12e6:	3a f0       	brmi	.+14     	; 0x12f6 <__divsf3_pse+0x3a>
    12e8:	e0 e8       	ldi	r30, 0x80	; 128
    12ea:	30 d0       	rcall	.+96     	; 0x134c <__divsf3_pse+0x90>
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	e6 95       	lsr	r30
    12f2:	00 1c       	adc	r0, r0
    12f4:	ca f7       	brpl	.-14     	; 0x12e8 <__divsf3_pse+0x2c>
    12f6:	29 d0       	rcall	.+82     	; 0x134a <__divsf3_pse+0x8e>
    12f8:	fe 2f       	mov	r31, r30
    12fa:	27 d0       	rcall	.+78     	; 0x134a <__divsf3_pse+0x8e>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	bb 1f       	adc	r27, r27
    1304:	26 17       	cp	r18, r22
    1306:	37 07       	cpc	r19, r23
    1308:	48 07       	cpc	r20, r24
    130a:	ab 07       	cpc	r26, r27
    130c:	b0 e8       	ldi	r27, 0x80	; 128
    130e:	09 f0       	breq	.+2      	; 0x1312 <__divsf3_pse+0x56>
    1310:	bb 0b       	sbc	r27, r27
    1312:	80 2d       	mov	r24, r0
    1314:	bf 01       	movw	r22, r30
    1316:	ff 27       	eor	r31, r31
    1318:	93 58       	subi	r25, 0x83	; 131
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	2a f0       	brmi	.+10     	; 0x1328 <__divsf3_pse+0x6c>
    131e:	9e 3f       	cpi	r25, 0xFE	; 254
    1320:	51 05       	cpc	r21, r1
    1322:	68 f0       	brcs	.+26     	; 0x133e <__divsf3_pse+0x82>
    1324:	b6 c0       	rjmp	.+364    	; 0x1492 <__fp_inf>
    1326:	00 c1       	rjmp	.+512    	; 0x1528 <__fp_szero>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	ec f3       	brlt	.-6      	; 0x1326 <__divsf3_pse+0x6a>
    132c:	98 3e       	cpi	r25, 0xE8	; 232
    132e:	dc f3       	brlt	.-10     	; 0x1326 <__divsf3_pse+0x6a>
    1330:	86 95       	lsr	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	b7 95       	ror	r27
    1338:	f7 95       	ror	r31
    133a:	9f 5f       	subi	r25, 0xFF	; 255
    133c:	c9 f7       	brne	.-14     	; 0x1330 <__divsf3_pse+0x74>
    133e:	88 0f       	add	r24, r24
    1340:	91 1d       	adc	r25, r1
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret
    134a:	e1 e0       	ldi	r30, 0x01	; 1
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	bb 1f       	adc	r27, r27
    1354:	62 17       	cp	r22, r18
    1356:	73 07       	cpc	r23, r19
    1358:	84 07       	cpc	r24, r20
    135a:	ba 07       	cpc	r27, r26
    135c:	20 f0       	brcs	.+8      	; 0x1366 <__divsf3_pse+0xaa>
    135e:	62 1b       	sub	r22, r18
    1360:	73 0b       	sbc	r23, r19
    1362:	84 0b       	sbc	r24, r20
    1364:	ba 0b       	sbc	r27, r26
    1366:	ee 1f       	adc	r30, r30
    1368:	88 f7       	brcc	.-30     	; 0x134c <__divsf3_pse+0x90>
    136a:	e0 95       	com	r30
    136c:	08 95       	ret

0000136e <__fixsfsi>:
    136e:	04 d0       	rcall	.+8      	; 0x1378 <__fixunssfsi>
    1370:	68 94       	set
    1372:	b1 11       	cpse	r27, r1
    1374:	d9 c0       	rjmp	.+434    	; 0x1528 <__fp_szero>
    1376:	08 95       	ret

00001378 <__fixunssfsi>:
    1378:	bc d0       	rcall	.+376    	; 0x14f2 <__fp_splitA>
    137a:	88 f0       	brcs	.+34     	; 0x139e <__fixunssfsi+0x26>
    137c:	9f 57       	subi	r25, 0x7F	; 127
    137e:	90 f0       	brcs	.+36     	; 0x13a4 <__fixunssfsi+0x2c>
    1380:	b9 2f       	mov	r27, r25
    1382:	99 27       	eor	r25, r25
    1384:	b7 51       	subi	r27, 0x17	; 23
    1386:	a0 f0       	brcs	.+40     	; 0x13b0 <__fixunssfsi+0x38>
    1388:	d1 f0       	breq	.+52     	; 0x13be <__fixunssfsi+0x46>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	1a f0       	brmi	.+6      	; 0x139a <__fixunssfsi+0x22>
    1394:	ba 95       	dec	r27
    1396:	c9 f7       	brne	.-14     	; 0x138a <__fixunssfsi+0x12>
    1398:	12 c0       	rjmp	.+36     	; 0x13be <__fixunssfsi+0x46>
    139a:	b1 30       	cpi	r27, 0x01	; 1
    139c:	81 f0       	breq	.+32     	; 0x13be <__fixunssfsi+0x46>
    139e:	c3 d0       	rcall	.+390    	; 0x1526 <__fp_zero>
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	08 95       	ret
    13a4:	c0 c0       	rjmp	.+384    	; 0x1526 <__fp_zero>
    13a6:	67 2f       	mov	r22, r23
    13a8:	78 2f       	mov	r23, r24
    13aa:	88 27       	eor	r24, r24
    13ac:	b8 5f       	subi	r27, 0xF8	; 248
    13ae:	39 f0       	breq	.+14     	; 0x13be <__fixunssfsi+0x46>
    13b0:	b9 3f       	cpi	r27, 0xF9	; 249
    13b2:	cc f3       	brlt	.-14     	; 0x13a6 <__fixunssfsi+0x2e>
    13b4:	86 95       	lsr	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b3 95       	inc	r27
    13bc:	d9 f7       	brne	.-10     	; 0x13b4 <__fixunssfsi+0x3c>
    13be:	3e f4       	brtc	.+14     	; 0x13ce <__fixunssfsi+0x56>
    13c0:	90 95       	com	r25
    13c2:	80 95       	com	r24
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	08 95       	ret

000013d0 <__floatunsisf>:
    13d0:	e8 94       	clt
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <__floatsisf+0x12>

000013d4 <__floatsisf>:
    13d4:	97 fb       	bst	r25, 7
    13d6:	3e f4       	brtc	.+14     	; 0x13e6 <__floatsisf+0x12>
    13d8:	90 95       	com	r25
    13da:	80 95       	com	r24
    13dc:	70 95       	com	r23
    13de:	61 95       	neg	r22
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	8f 4f       	sbci	r24, 0xFF	; 255
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	99 23       	and	r25, r25
    13e8:	a9 f0       	breq	.+42     	; 0x1414 <__floatsisf+0x40>
    13ea:	f9 2f       	mov	r31, r25
    13ec:	96 e9       	ldi	r25, 0x96	; 150
    13ee:	bb 27       	eor	r27, r27
    13f0:	93 95       	inc	r25
    13f2:	f6 95       	lsr	r31
    13f4:	87 95       	ror	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	b7 95       	ror	r27
    13fc:	f1 11       	cpse	r31, r1
    13fe:	f8 cf       	rjmp	.-16     	; 0x13f0 <__floatsisf+0x1c>
    1400:	fa f4       	brpl	.+62     	; 0x1440 <__floatsisf+0x6c>
    1402:	bb 0f       	add	r27, r27
    1404:	11 f4       	brne	.+4      	; 0x140a <__floatsisf+0x36>
    1406:	60 ff       	sbrs	r22, 0
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <__floatsisf+0x6c>
    140a:	6f 5f       	subi	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	8f 4f       	sbci	r24, 0xFF	; 255
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <__floatsisf+0x6c>
    1414:	88 23       	and	r24, r24
    1416:	11 f0       	breq	.+4      	; 0x141c <__floatsisf+0x48>
    1418:	96 e9       	ldi	r25, 0x96	; 150
    141a:	11 c0       	rjmp	.+34     	; 0x143e <__floatsisf+0x6a>
    141c:	77 23       	and	r23, r23
    141e:	21 f0       	breq	.+8      	; 0x1428 <__floatsisf+0x54>
    1420:	9e e8       	ldi	r25, 0x8E	; 142
    1422:	87 2f       	mov	r24, r23
    1424:	76 2f       	mov	r23, r22
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <__floatsisf+0x5e>
    1428:	66 23       	and	r22, r22
    142a:	71 f0       	breq	.+28     	; 0x1448 <__floatsisf+0x74>
    142c:	96 e8       	ldi	r25, 0x86	; 134
    142e:	86 2f       	mov	r24, r22
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	2a f0       	brmi	.+10     	; 0x1440 <__floatsisf+0x6c>
    1436:	9a 95       	dec	r25
    1438:	66 0f       	add	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	da f7       	brpl	.-10     	; 0x1436 <__floatsisf+0x62>
    1440:	88 0f       	add	r24, r24
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	97 f9       	bld	r25, 7
    1448:	08 95       	ret

0000144a <__fp_cmp>:
    144a:	99 0f       	add	r25, r25
    144c:	00 08       	sbc	r0, r0
    144e:	55 0f       	add	r21, r21
    1450:	aa 0b       	sbc	r26, r26
    1452:	e0 e8       	ldi	r30, 0x80	; 128
    1454:	fe ef       	ldi	r31, 0xFE	; 254
    1456:	16 16       	cp	r1, r22
    1458:	17 06       	cpc	r1, r23
    145a:	e8 07       	cpc	r30, r24
    145c:	f9 07       	cpc	r31, r25
    145e:	c0 f0       	brcs	.+48     	; 0x1490 <__fp_cmp+0x46>
    1460:	12 16       	cp	r1, r18
    1462:	13 06       	cpc	r1, r19
    1464:	e4 07       	cpc	r30, r20
    1466:	f5 07       	cpc	r31, r21
    1468:	98 f0       	brcs	.+38     	; 0x1490 <__fp_cmp+0x46>
    146a:	62 1b       	sub	r22, r18
    146c:	73 0b       	sbc	r23, r19
    146e:	84 0b       	sbc	r24, r20
    1470:	95 0b       	sbc	r25, r21
    1472:	39 f4       	brne	.+14     	; 0x1482 <__fp_cmp+0x38>
    1474:	0a 26       	eor	r0, r26
    1476:	61 f0       	breq	.+24     	; 0x1490 <__fp_cmp+0x46>
    1478:	23 2b       	or	r18, r19
    147a:	24 2b       	or	r18, r20
    147c:	25 2b       	or	r18, r21
    147e:	21 f4       	brne	.+8      	; 0x1488 <__fp_cmp+0x3e>
    1480:	08 95       	ret
    1482:	0a 26       	eor	r0, r26
    1484:	09 f4       	brne	.+2      	; 0x1488 <__fp_cmp+0x3e>
    1486:	a1 40       	sbci	r26, 0x01	; 1
    1488:	a6 95       	lsr	r26
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	81 1d       	adc	r24, r1
    148e:	81 1d       	adc	r24, r1
    1490:	08 95       	ret

00001492 <__fp_inf>:
    1492:	97 f9       	bld	r25, 7
    1494:	9f 67       	ori	r25, 0x7F	; 127
    1496:	80 e8       	ldi	r24, 0x80	; 128
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	08 95       	ret

0000149e <__fp_nan>:
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	08 95       	ret

000014a4 <__fp_pscA>:
    14a4:	00 24       	eor	r0, r0
    14a6:	0a 94       	dec	r0
    14a8:	16 16       	cp	r1, r22
    14aa:	17 06       	cpc	r1, r23
    14ac:	18 06       	cpc	r1, r24
    14ae:	09 06       	cpc	r0, r25
    14b0:	08 95       	ret

000014b2 <__fp_pscB>:
    14b2:	00 24       	eor	r0, r0
    14b4:	0a 94       	dec	r0
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	05 06       	cpc	r0, r21
    14be:	08 95       	ret

000014c0 <__fp_round>:
    14c0:	09 2e       	mov	r0, r25
    14c2:	03 94       	inc	r0
    14c4:	00 0c       	add	r0, r0
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__fp_round+0xc>
    14c8:	88 23       	and	r24, r24
    14ca:	52 f0       	brmi	.+20     	; 0x14e0 <__fp_round+0x20>
    14cc:	bb 0f       	add	r27, r27
    14ce:	40 f4       	brcc	.+16     	; 0x14e0 <__fp_round+0x20>
    14d0:	bf 2b       	or	r27, r31
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__fp_round+0x18>
    14d4:	60 ff       	sbrs	r22, 0
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <__fp_round+0x20>
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	08 95       	ret

000014e2 <__fp_split3>:
    14e2:	57 fd       	sbrc	r21, 7
    14e4:	90 58       	subi	r25, 0x80	; 128
    14e6:	44 0f       	add	r20, r20
    14e8:	55 1f       	adc	r21, r21
    14ea:	59 f0       	breq	.+22     	; 0x1502 <__fp_splitA+0x10>
    14ec:	5f 3f       	cpi	r21, 0xFF	; 255
    14ee:	71 f0       	breq	.+28     	; 0x150c <__fp_splitA+0x1a>
    14f0:	47 95       	ror	r20

000014f2 <__fp_splitA>:
    14f2:	88 0f       	add	r24, r24
    14f4:	97 fb       	bst	r25, 7
    14f6:	99 1f       	adc	r25, r25
    14f8:	61 f0       	breq	.+24     	; 0x1512 <__fp_splitA+0x20>
    14fa:	9f 3f       	cpi	r25, 0xFF	; 255
    14fc:	79 f0       	breq	.+30     	; 0x151c <__fp_splitA+0x2a>
    14fe:	87 95       	ror	r24
    1500:	08 95       	ret
    1502:	12 16       	cp	r1, r18
    1504:	13 06       	cpc	r1, r19
    1506:	14 06       	cpc	r1, r20
    1508:	55 1f       	adc	r21, r21
    150a:	f2 cf       	rjmp	.-28     	; 0x14f0 <__fp_split3+0xe>
    150c:	46 95       	lsr	r20
    150e:	f1 df       	rcall	.-30     	; 0x14f2 <__fp_splitA>
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <__fp_splitA+0x30>
    1512:	16 16       	cp	r1, r22
    1514:	17 06       	cpc	r1, r23
    1516:	18 06       	cpc	r1, r24
    1518:	99 1f       	adc	r25, r25
    151a:	f1 cf       	rjmp	.-30     	; 0x14fe <__fp_splitA+0xc>
    151c:	86 95       	lsr	r24
    151e:	71 05       	cpc	r23, r1
    1520:	61 05       	cpc	r22, r1
    1522:	08 94       	sec
    1524:	08 95       	ret

00001526 <__fp_zero>:
    1526:	e8 94       	clt

00001528 <__fp_szero>:
    1528:	bb 27       	eor	r27, r27
    152a:	66 27       	eor	r22, r22
    152c:	77 27       	eor	r23, r23
    152e:	cb 01       	movw	r24, r22
    1530:	97 f9       	bld	r25, 7
    1532:	08 95       	ret

00001534 <__gesf2>:
    1534:	8a df       	rcall	.-236    	; 0x144a <__fp_cmp>
    1536:	08 f4       	brcc	.+2      	; 0x153a <__gesf2+0x6>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	08 95       	ret

0000153c <__mulsf3>:
    153c:	0b d0       	rcall	.+22     	; 0x1554 <__mulsf3x>
    153e:	c0 cf       	rjmp	.-128    	; 0x14c0 <__fp_round>
    1540:	b1 df       	rcall	.-158    	; 0x14a4 <__fp_pscA>
    1542:	28 f0       	brcs	.+10     	; 0x154e <__mulsf3+0x12>
    1544:	b6 df       	rcall	.-148    	; 0x14b2 <__fp_pscB>
    1546:	18 f0       	brcs	.+6      	; 0x154e <__mulsf3+0x12>
    1548:	95 23       	and	r25, r21
    154a:	09 f0       	breq	.+2      	; 0x154e <__mulsf3+0x12>
    154c:	a2 cf       	rjmp	.-188    	; 0x1492 <__fp_inf>
    154e:	a7 cf       	rjmp	.-178    	; 0x149e <__fp_nan>
    1550:	11 24       	eor	r1, r1
    1552:	ea cf       	rjmp	.-44     	; 0x1528 <__fp_szero>

00001554 <__mulsf3x>:
    1554:	c6 df       	rcall	.-116    	; 0x14e2 <__fp_split3>
    1556:	a0 f3       	brcs	.-24     	; 0x1540 <__mulsf3+0x4>

00001558 <__mulsf3_pse>:
    1558:	95 9f       	mul	r25, r21
    155a:	d1 f3       	breq	.-12     	; 0x1550 <__mulsf3+0x14>
    155c:	95 0f       	add	r25, r21
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	55 1f       	adc	r21, r21
    1562:	62 9f       	mul	r22, r18
    1564:	f0 01       	movw	r30, r0
    1566:	72 9f       	mul	r23, r18
    1568:	bb 27       	eor	r27, r27
    156a:	f0 0d       	add	r31, r0
    156c:	b1 1d       	adc	r27, r1
    156e:	63 9f       	mul	r22, r19
    1570:	aa 27       	eor	r26, r26
    1572:	f0 0d       	add	r31, r0
    1574:	b1 1d       	adc	r27, r1
    1576:	aa 1f       	adc	r26, r26
    1578:	64 9f       	mul	r22, r20
    157a:	66 27       	eor	r22, r22
    157c:	b0 0d       	add	r27, r0
    157e:	a1 1d       	adc	r26, r1
    1580:	66 1f       	adc	r22, r22
    1582:	82 9f       	mul	r24, r18
    1584:	22 27       	eor	r18, r18
    1586:	b0 0d       	add	r27, r0
    1588:	a1 1d       	adc	r26, r1
    158a:	62 1f       	adc	r22, r18
    158c:	73 9f       	mul	r23, r19
    158e:	b0 0d       	add	r27, r0
    1590:	a1 1d       	adc	r26, r1
    1592:	62 1f       	adc	r22, r18
    1594:	83 9f       	mul	r24, r19
    1596:	a0 0d       	add	r26, r0
    1598:	61 1d       	adc	r22, r1
    159a:	22 1f       	adc	r18, r18
    159c:	74 9f       	mul	r23, r20
    159e:	33 27       	eor	r19, r19
    15a0:	a0 0d       	add	r26, r0
    15a2:	61 1d       	adc	r22, r1
    15a4:	23 1f       	adc	r18, r19
    15a6:	84 9f       	mul	r24, r20
    15a8:	60 0d       	add	r22, r0
    15aa:	21 1d       	adc	r18, r1
    15ac:	82 2f       	mov	r24, r18
    15ae:	76 2f       	mov	r23, r22
    15b0:	6a 2f       	mov	r22, r26
    15b2:	11 24       	eor	r1, r1
    15b4:	9f 57       	subi	r25, 0x7F	; 127
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	8a f0       	brmi	.+34     	; 0x15dc <__mulsf3_pse+0x84>
    15ba:	e1 f0       	breq	.+56     	; 0x15f4 <__mulsf3_pse+0x9c>
    15bc:	88 23       	and	r24, r24
    15be:	4a f0       	brmi	.+18     	; 0x15d2 <__mulsf3_pse+0x7a>
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	bb 1f       	adc	r27, r27
    15c6:	66 1f       	adc	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	91 50       	subi	r25, 0x01	; 1
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	a9 f7       	brne	.-22     	; 0x15bc <__mulsf3_pse+0x64>
    15d2:	9e 3f       	cpi	r25, 0xFE	; 254
    15d4:	51 05       	cpc	r21, r1
    15d6:	70 f0       	brcs	.+28     	; 0x15f4 <__mulsf3_pse+0x9c>
    15d8:	5c cf       	rjmp	.-328    	; 0x1492 <__fp_inf>
    15da:	a6 cf       	rjmp	.-180    	; 0x1528 <__fp_szero>
    15dc:	5f 3f       	cpi	r21, 0xFF	; 255
    15de:	ec f3       	brlt	.-6      	; 0x15da <__mulsf3_pse+0x82>
    15e0:	98 3e       	cpi	r25, 0xE8	; 232
    15e2:	dc f3       	brlt	.-10     	; 0x15da <__mulsf3_pse+0x82>
    15e4:	86 95       	lsr	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f7 95       	ror	r31
    15ee:	e7 95       	ror	r30
    15f0:	9f 5f       	subi	r25, 0xFF	; 255
    15f2:	c1 f7       	brne	.-16     	; 0x15e4 <__mulsf3_pse+0x8c>
    15f4:	fe 2b       	or	r31, r30
    15f6:	88 0f       	add	r24, r24
    15f8:	91 1d       	adc	r25, r1
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	97 f9       	bld	r25, 7
    1600:	08 95       	ret

00001602 <__tablejump2__>:
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31

00001606 <__tablejump__>:
    1606:	05 90       	lpm	r0, Z+
    1608:	f4 91       	lpm	r31, Z
    160a:	e0 2d       	mov	r30, r0
    160c:	09 94       	ijmp

0000160e <_exit>:
    160e:	f8 94       	cli

00001610 <__stop_program>:
    1610:	ff cf       	rjmp	.-2      	; 0x1610 <__stop_program>
