
CarCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001f  00800060  00800060  0000072a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f49  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000410  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004df  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000434  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002fc  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013d0  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e0  00000000  00000000  00003bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  74:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <systemTimeInit>:
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
		val -= buff;
		if(!val)
  7c:	10 92 7e 00 	sts	0x007E, r1
		val = -val;
		neg = 1;
	}
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
  80:	10 92 7d 00 	sts	0x007D, r1
  84:	1d bc       	out	0x2d, r1	; 45
  86:	1c bc       	out	0x2c, r1	; 44
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	88 bf       	out	0x38, r24	; 56
		msg[5-i] = buff+48;
  8c:	89 b7       	in	r24, 0x39	; 57
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	89 bf       	out	0x39, r24	; 57
  92:	78 94       	sei
  94:	1f bc       	out	0x2f, r1	; 47
		byte++;
  96:	83 e0       	ldi	r24, 0x03	; 3
		val -= buff;
  98:	8e bd       	out	0x2e, r24	; 46
  9a:	08 95       	ret

0000009c <__vector_9>:
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
		if(!val)
  a8:	9f 93       	push	r25
			break;
		val /= 10;	
  aa:	80 91 7d 00 	lds	r24, 0x007D
  ae:	90 91 7e 00 	lds	r25, 0x007E
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 7e 00 	sts	0x007E, r25
	if(val<0){
		val = -val;
		neg = 1;
	}
		
	for(uint8_t i=0; i<5; i++){
  b8:	80 93 7d 00 	sts	0x007D, r24
  bc:	9f 91       	pop	r25
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
		if(!val)
			break;
		val /= 10;	
	}
	
	if(neg)
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
		msg[5-byte] = 45;
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <time>:
  ca:	2c b5       	in	r18, 0x2c	; 44
  cc:	3d b5       	in	r19, 0x2d	; 45
  ce:	60 91 7d 00 	lds	r22, 0x007D
  d2:	70 91 7e 00 	lds	r23, 0x007E
	if(byte+neg != 6){
  d6:	cb 01       	movw	r24, r22
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	dc 01       	movw	r26, r24
  de:	99 27       	eor	r25, r25
  e0:	88 27       	eor	r24, r24
  e2:	bc 01       	movw	r22, r24
  e4:	cd 01       	movw	r24, r26
  e6:	62 0f       	add	r22, r18
  e8:	73 1f       	adc	r23, r19
		for(uint8_t j = 0; j < byte+neg ; j++)
  ea:	81 1d       	adc	r24, r1
  ec:	91 1d       	adc	r25, r1
  ee:	0e 94 44 02 	call	0x488	; 0x488 <__floatunsisf>
  f2:	2d eb       	ldi	r18, 0xBD	; 189
  f4:	37 e3       	ldi	r19, 0x37	; 55
			msg[j] = msg[6-byte-neg+j];
  f6:	46 e8       	ldi	r20, 0x86	; 134
  f8:	58 e3       	ldi	r21, 0x38	; 56
  fa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__mulsf3>
  fe:	08 95       	ret

00000100 <gpioInit>:
 100:	90 b7       	in	r25, 0x30	; 48
 102:	9b 7f       	andi	r25, 0xFB	; 251
 104:	90 bf       	out	0x30, r25	; 48
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 a1       	ldd	r19, Z+33	; 0x21
 10c:	a1 e0       	ldi	r26, 0x01	; 1
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	06 2e       	mov	r0, r22
 112:	02 c0       	rjmp	.+4      	; 0x118 <gpioInit+0x18>
 114:	aa 0f       	add	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	0a 94       	dec	r0
	}
	
	if(neg)
		msg[5-byte] = 45;
	if(byte+neg != 6){
		for(uint8_t j = 0; j < byte+neg ; j++)
 11a:	e2 f7       	brpl	.-8      	; 0x114 <gpioInit+0x14>
 11c:	a0 95       	com	r26
 11e:	3a 23       	and	r19, r26
 120:	84 2f       	mov	r24, r20
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ac 01       	movw	r20, r24
			msg[j] = msg[6-byte-neg+j];
	}
	
	return uartTransmit(msg, byte+neg, 0.15);
 126:	06 2e       	mov	r0, r22
 128:	02 c0       	rjmp	.+4      	; 0x12e <gpioInit+0x2e>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <gpioInit+0x2a>
 132:	43 2b       	or	r20, r19
 134:	41 a3       	std	Z+33, r20	; 0x21
 136:	82 a1       	ldd	r24, Z+34	; 0x22
 138:	a8 23       	and	r26, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
		msg[5-i] = buff+48;
		byte++;
		val -= buff;
		if(!val)
			break;
		val /= 10;	
 13c:	c9 01       	movw	r24, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <gpioInit+0x44>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <gpioInit+0x40>
 148:	bc 01       	movw	r22, r24
 14a:	6a 2b       	or	r22, r26
 14c:	62 a3       	std	Z+34, r22	; 0x22
 14e:	08 95       	ret

00000150 <gpioWrite>:
 150:	e8 2f       	mov	r30, r24
	}
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
		msg[5-i] = buff+48;
		byte++;
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	52 a1       	ldd	r21, Z+34	; 0x22
		val = -val;
		neg = 1;
	}
		
	for(uint8_t i=0; i<5; i++){
		buff = val%10;
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	c9 01       	movw	r24, r18
 15c:	06 2e       	mov	r0, r22
 15e:	02 c0       	rjmp	.+4      	; 0x164 <gpioWrite+0x14>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
			msg[j] = msg[6-byte-neg+j];
	}
	
	return uartTransmit(msg, byte+neg, 0.15);
	
}
 166:	e2 f7       	brpl	.-8      	; 0x160 <gpioWrite+0x10>
 168:	80 95       	com	r24
 16a:	85 23       	and	r24, r21
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	9a 01       	movw	r18, r20
 170:	02 c0       	rjmp	.+4      	; 0x176 <gpioWrite+0x26>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <gpioWrite+0x22>
 17a:	b9 01       	movw	r22, r18
 17c:	68 2b       	or	r22, r24
 17e:	62 a3       	std	Z+34, r22	; 0x22
 180:	08 95       	ret

00000182 <delay>:
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
/*
Function:	delay
Arguments:	time		delay in seconds
Remarks:	CKSEL3:0 should be set to 0001 for 1MHz Internal RC Oscillator
*/
void delay(float timeDelay){
 190:	ff 92       	push	r15
 192:	4b 01       	movw	r8, r22
 194:	5c 01       	movw	r10, r24
	float timeBuff = time();
 196:	0e 94 65 00 	call	0xca	; 0xca <time>
 19a:	6b 01       	movw	r12, r22
 19c:	7c 01       	movw	r14, r24
	
	while(time() - timeBuff < timeDelay);
 19e:	0e 94 65 00 	call	0xca	; 0xca <time>
 1a2:	a7 01       	movw	r20, r14
 1a4:	96 01       	movw	r18, r12
 1a6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__subsf3>
 1aa:	a5 01       	movw	r20, r10
 1ac:	94 01       	movw	r18, r8
 1ae:	0e 94 40 02 	call	0x480	; 0x480 <__cmpsf2>
 1b2:	88 23       	and	r24, r24
 1b4:	a4 f3       	brlt	.-24     	; 0x19e <delay+0x1c>
	
}
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	08 95       	ret

000001c8 <EEWrite>:
Function:	EEWrite
Arguments:	add			base address in EEPROM
			num			number of bytes to be stored
			data		pointer to data to be stored
*/
void EEWrite(uint16_t add, uint16_t num, uint8_t* data){
 1c8:	cf 93       	push	r28
	
	for(uint8_t i=0; i<num; i++){
 1ca:	61 15       	cp	r22, r1
 1cc:	71 05       	cpc	r23, r1
 1ce:	d9 f0       	breq	.+54     	; 0x206 <EEWrite+0x3e>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
		while(EECR & 0b00000010);
		EEAR = add + i;
		EEDR = *(data+i);
		cli();
		EECR = 0b00000100;
 1d6:	c4 e0       	ldi	r28, 0x04	; 4
		EECR = 0b00000110;
 1d8:	b6 e0       	ldi	r27, 0x06	; 6
			data		pointer to data to be stored
*/
void EEWrite(uint16_t add, uint16_t num, uint8_t* data){
	
	for(uint8_t i=0; i<num; i++){
		while(EECR & 0b00000010);
 1da:	e1 99       	sbic	0x1c, 1	; 28
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <EEWrite+0x12>
		EEAR = add + i;
 1de:	f9 01       	movw	r30, r18
 1e0:	e8 0f       	add	r30, r24
 1e2:	f9 1f       	adc	r31, r25
 1e4:	ff bb       	out	0x1f, r31	; 31
 1e6:	ee bb       	out	0x1e, r30	; 30
		EEDR = *(data+i);
 1e8:	fa 01       	movw	r30, r20
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	20 81       	ld	r18, Z
 1f0:	2d bb       	out	0x1d, r18	; 29
		cli();
 1f2:	f8 94       	cli
		EECR = 0b00000100;
 1f4:	cc bb       	out	0x1c, r28	; 28
		EECR = 0b00000110;
 1f6:	bc bb       	out	0x1c, r27	; 28
		sei();
 1f8:	78 94       	sei
			num			number of bytes to be stored
			data		pointer to data to be stored
*/
void EEWrite(uint16_t add, uint16_t num, uint8_t* data){
	
	for(uint8_t i=0; i<num; i++){
 1fa:	af 5f       	subi	r26, 0xFF	; 255
 1fc:	2a 2f       	mov	r18, r26
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	26 17       	cp	r18, r22
 202:	37 07       	cpc	r19, r23
 204:	50 f3       	brcs	.-44     	; 0x1da <EEWrite+0x12>
		EECR = 0b00000100;
		EECR = 0b00000110;
		sei();
	}
	
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <EERead>:
Function:	EERead
Arguments:	add			base address in EEPROM
			num			number of bytes to be read
			data		pointer to location where data to be read is stored
*/
void EERead(uint16_t add, uint16_t num, uint8_t* data){
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	
	for(uint8_t i=0; i<num; i++){
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	c9 f0       	breq	.+50     	; 0x246 <EERead+0x3c>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	a0 e0       	ldi	r26, 0x00	; 0
		while(EECR & 0b00000010);
		EEAR = add + i;
		cli();
		EECR = 0b00000001;
 21a:	b1 e0       	ldi	r27, 0x01	; 1
			data		pointer to location where data to be read is stored
*/
void EERead(uint16_t add, uint16_t num, uint8_t* data){
	
	for(uint8_t i=0; i<num; i++){
		while(EECR & 0b00000010);
 21c:	e1 99       	sbic	0x1c, 1	; 28
 21e:	fe cf       	rjmp	.-4      	; 0x21c <EERead+0x12>
		EEAR = add + i;
 220:	f9 01       	movw	r30, r18
 222:	e8 0f       	add	r30, r24
 224:	f9 1f       	adc	r31, r25
 226:	ff bb       	out	0x1f, r31	; 31
 228:	ee bb       	out	0x1e, r30	; 30
		cli();
 22a:	f8 94       	cli
		EECR = 0b00000001;
 22c:	bc bb       	out	0x1c, r27	; 28
		sei();
 22e:	78 94       	sei
		*(data+i) = EEDR;
 230:	ed b3       	in	r30, 0x1d	; 29
 232:	ea 01       	movw	r28, r20
 234:	c2 0f       	add	r28, r18
 236:	d3 1f       	adc	r29, r19
 238:	e8 83       	st	Y, r30
			num			number of bytes to be read
			data		pointer to location where data to be read is stored
*/
void EERead(uint16_t add, uint16_t num, uint8_t* data){
	
	for(uint8_t i=0; i<num; i++){
 23a:	af 5f       	subi	r26, 0xFF	; 255
 23c:	2a 2f       	mov	r18, r26
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	26 17       	cp	r18, r22
 242:	37 07       	cpc	r19, r23
 244:	58 f3       	brcs	.-42     	; 0x21c <EERead+0x12>
		EECR = 0b00000001;
		sei();
		*(data+i) = EEDR;
	}
	
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <main>:
#include "Modules.h"


//on board LED PA1
int main(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	60 97       	sbiw	r28, 0x10	; 16
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
	
	systemTimeInit();
 260:	0e 94 3e 00 	call	0x7c	; 0x7c <systemTimeInit>
	gpioInit(portA, 0, input, pullup);
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	89 e1       	ldi	r24, 0x19	; 25
 26c:	0e 94 80 00 	call	0x100	; 0x100 <gpioInit>
	gpioInit(portA, 1, input, pullup);
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	89 e1       	ldi	r24, 0x19	; 25
 278:	0e 94 80 00 	call	0x100	; 0x100 <gpioInit>
	gpioInit(portA, 2, output, 0);
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	89 e1       	ldi	r24, 0x19	; 25
 284:	0e 94 80 00 	call	0x100	; 0x100 <gpioInit>
	gpioInit(portA, 3, output, 0);
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	89 e1       	ldi	r24, 0x19	; 25
 290:	0e 94 80 00 	call	0x100	; 0x100 <gpioInit>
	gpioInit(portA, 4, output, 0);
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	89 e1       	ldi	r24, 0x19	; 25
 29c:	0e 94 80 00 	call	0x100	; 0x100 <gpioInit>
	uint8_t sport[9] = {portA, portA, portB, portB, portB, portD, portD, portD, portD};		//abcdefg12
	uint8_t spin[9]  = {  0  ,   2  ,   2  ,   3  ,   0  ,   1  ,   6  ,   7  ,   0  };
	ssegInit(sport, spin, 100);
	ssegEnable(1);
	*/
	float num1 = 1.234;
 2a0:	86 eb       	ldi	r24, 0xB6	; 182
 2a2:	93 ef       	ldi	r25, 0xF3	; 243
 2a4:	ad e9       	ldi	r26, 0x9D	; 157
 2a6:	bf e3       	ldi	r27, 0x3F	; 63
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	ab 83       	std	Y+3, r26	; 0x03
 2ae:	bc 83       	std	Y+4, r27	; 0x04
	float buff1 = 0;
 2b0:	1d 82       	std	Y+5, r1	; 0x05
 2b2:	1e 82       	std	Y+6, r1	; 0x06
 2b4:	1f 82       	std	Y+7, r1	; 0x07
 2b6:	18 86       	std	Y+8, r1	; 0x08
	float num2 = 100.6;
 2b8:	83 e3       	ldi	r24, 0x33	; 51
 2ba:	93 e3       	ldi	r25, 0x33	; 51
 2bc:	a9 ec       	ldi	r26, 0xC9	; 201
 2be:	b2 e4       	ldi	r27, 0x42	; 66
 2c0:	89 87       	std	Y+9, r24	; 0x09
 2c2:	9a 87       	std	Y+10, r25	; 0x0a
 2c4:	ab 87       	std	Y+11, r26	; 0x0b
 2c6:	bc 87       	std	Y+12, r27	; 0x0c
	float buff2 = 0;
 2c8:	1d 86       	std	Y+13, r1	; 0x0d
 2ca:	1e 86       	std	Y+14, r1	; 0x0e
 2cc:	1f 86       	std	Y+15, r1	; 0x0f
 2ce:	18 8a       	std	Y+16, r1	; 0x10
	
    while(1)
    {
		if(!gpioRead(portA, 0)){
 2d0:	c8 99       	sbic	0x19, 0	; 25
 2d2:	23 c0       	rjmp	.+70     	; 0x31a <main+0xce>
			gpioWrite(portA, 2, 1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	89 e1       	ldi	r24, 0x19	; 25
 2da:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
			EEWrite(21, 4, (uint8_t*)(&num1));
 2de:	ae 01       	movw	r20, r28
 2e0:	4f 5f       	subi	r20, 0xFF	; 255
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	85 e1       	ldi	r24, 0x15	; 21
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EEWrite>
			EEWrite(25, 4, (uint8_t*)(&num2 ));
 2f0:	ae 01       	movw	r20, r28
 2f2:	47 5f       	subi	r20, 0xF7	; 247
 2f4:	5f 4f       	sbci	r21, 0xFF	; 255
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	89 e1       	ldi	r24, 0x19	; 25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EEWrite>
			delay(1);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	9f e3       	ldi	r25, 0x3F	; 63
 30a:	0e 94 c1 00 	call	0x182	; 0x182 <delay>
			gpioWrite(portA, 2, 0);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	89 e1       	ldi	r24, 0x19	; 25
 314:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
 318:	24 c0       	rjmp	.+72     	; 0x362 <main+0x116>
		}else if(!gpioRead(portA, 1)){
 31a:	c9 99       	sbic	0x19, 1	; 25
 31c:	22 c0       	rjmp	.+68     	; 0x362 <main+0x116>
			gpioWrite(portA, 2, 1);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	89 e1       	ldi	r24, 0x19	; 25
 324:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
			EERead(21, 4, (uint8_t*)(&buff1));
 328:	ae 01       	movw	r20, r28
 32a:	4b 5f       	subi	r20, 0xFB	; 251
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	85 e1       	ldi	r24, 0x15	; 21
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 05 01 	call	0x20a	; 0x20a <EERead>
			EERead(25, 4, (uint8_t*)(&buff2));
 33a:	ae 01       	movw	r20, r28
 33c:	43 5f       	subi	r20, 0xF3	; 243
 33e:	5f 4f       	sbci	r21, 0xFF	; 255
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	89 e1       	ldi	r24, 0x19	; 25
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 05 01 	call	0x20a	; 0x20a <EERead>
			delay(1);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	9f e3       	ldi	r25, 0x3F	; 63
 354:	0e 94 c1 00 	call	0x182	; 0x182 <delay>
			gpioWrite(portA, 2, 0);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	89 e1       	ldi	r24, 0x19	; 25
 35e:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
		}
		
		if((buff2 - buff1) == (num2 - num1))
 362:	2d 81       	ldd	r18, Y+5	; 0x05
 364:	3e 81       	ldd	r19, Y+6	; 0x06
 366:	4f 81       	ldd	r20, Y+7	; 0x07
 368:	58 85       	ldd	r21, Y+8	; 0x08
 36a:	6d 85       	ldd	r22, Y+13	; 0x0d
 36c:	7e 85       	ldd	r23, Y+14	; 0x0e
 36e:	8f 85       	ldd	r24, Y+15	; 0x0f
 370:	98 89       	ldd	r25, Y+16	; 0x10
 372:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__subsf3>
 376:	6b 01       	movw	r12, r22
 378:	7c 01       	movw	r14, r24
 37a:	29 81       	ldd	r18, Y+1	; 0x01
 37c:	3a 81       	ldd	r19, Y+2	; 0x02
 37e:	4b 81       	ldd	r20, Y+3	; 0x03
 380:	5c 81       	ldd	r21, Y+4	; 0x04
 382:	69 85       	ldd	r22, Y+9	; 0x09
 384:	7a 85       	ldd	r23, Y+10	; 0x0a
 386:	8b 85       	ldd	r24, Y+11	; 0x0b
 388:	9c 85       	ldd	r25, Y+12	; 0x0c
 38a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__subsf3>
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	0e 94 40 02 	call	0x480	; 0x480 <__cmpsf2>
 39a:	81 11       	cpse	r24, r1
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <main+0x15e>
			gpioWrite(portA, 3, 1);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	89 e1       	ldi	r24, 0x19	; 25
 3a4:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
 3a8:	93 cf       	rjmp	.-218    	; 0x2d0 <main+0x84>
		else
			gpioWrite(portA, 3, 0);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	89 e1       	ldi	r24, 0x19	; 25
 3b0:	0e 94 a8 00 	call	0x150	; 0x150 <gpioWrite>
 3b4:	8d cf       	rjmp	.-230    	; 0x2d0 <main+0x84>

000003b6 <__subsf3>:
 3b6:	50 58       	subi	r21, 0x80	; 128

000003b8 <__addsf3>:
 3b8:	bb 27       	eor	r27, r27
 3ba:	aa 27       	eor	r26, r26
 3bc:	0e d0       	rcall	.+28     	; 0x3da <__addsf3x>
 3be:	dc c0       	rjmp	.+440    	; 0x578 <__fp_round>
 3c0:	cd d0       	rcall	.+410    	; 0x55c <__fp_pscA>
 3c2:	30 f0       	brcs	.+12     	; 0x3d0 <__addsf3+0x18>
 3c4:	d2 d0       	rcall	.+420    	; 0x56a <__fp_pscB>
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <__addsf3+0x18>
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <__addsf3+0x1e>
 3ca:	9f 3f       	cpi	r25, 0xFF	; 255
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <__addsf3+0x1a>
 3ce:	1e f4       	brtc	.+6      	; 0x3d6 <__addsf3+0x1e>
 3d0:	c2 c0       	rjmp	.+388    	; 0x556 <__fp_nan>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__addsf3+0x1e>
 3d4:	e0 95       	com	r30
 3d6:	e7 fb       	bst	r30, 7
 3d8:	b8 c0       	rjmp	.+368    	; 0x54a <__fp_inf>

000003da <__addsf3x>:
 3da:	e9 2f       	mov	r30, r25
 3dc:	de d0       	rcall	.+444    	; 0x59a <__fp_split3>
 3de:	80 f3       	brcs	.-32     	; 0x3c0 <__addsf3+0x8>
 3e0:	ba 17       	cp	r27, r26
 3e2:	62 07       	cpc	r22, r18
 3e4:	73 07       	cpc	r23, r19
 3e6:	84 07       	cpc	r24, r20
 3e8:	95 07       	cpc	r25, r21
 3ea:	18 f0       	brcs	.+6      	; 0x3f2 <__addsf3x+0x18>
 3ec:	71 f4       	brne	.+28     	; 0x40a <__addsf3x+0x30>
 3ee:	9e f5       	brtc	.+102    	; 0x456 <__addsf3x+0x7c>
 3f0:	f6 c0       	rjmp	.+492    	; 0x5de <__fp_zero>
 3f2:	0e f4       	brtc	.+2      	; 0x3f6 <__addsf3x+0x1c>
 3f4:	e0 95       	com	r30
 3f6:	0b 2e       	mov	r0, r27
 3f8:	ba 2f       	mov	r27, r26
 3fa:	a0 2d       	mov	r26, r0
 3fc:	0b 01       	movw	r0, r22
 3fe:	b9 01       	movw	r22, r18
 400:	90 01       	movw	r18, r0
 402:	0c 01       	movw	r0, r24
 404:	ca 01       	movw	r24, r20
 406:	a0 01       	movw	r20, r0
 408:	11 24       	eor	r1, r1
 40a:	ff 27       	eor	r31, r31
 40c:	59 1b       	sub	r21, r25
 40e:	99 f0       	breq	.+38     	; 0x436 <__addsf3x+0x5c>
 410:	59 3f       	cpi	r21, 0xF9	; 249
 412:	50 f4       	brcc	.+20     	; 0x428 <__addsf3x+0x4e>
 414:	50 3e       	cpi	r21, 0xE0	; 224
 416:	68 f1       	brcs	.+90     	; 0x472 <__addsf3x+0x98>
 418:	1a 16       	cp	r1, r26
 41a:	f0 40       	sbci	r31, 0x00	; 0
 41c:	a2 2f       	mov	r26, r18
 41e:	23 2f       	mov	r18, r19
 420:	34 2f       	mov	r19, r20
 422:	44 27       	eor	r20, r20
 424:	58 5f       	subi	r21, 0xF8	; 248
 426:	f3 cf       	rjmp	.-26     	; 0x40e <__addsf3x+0x34>
 428:	46 95       	lsr	r20
 42a:	37 95       	ror	r19
 42c:	27 95       	ror	r18
 42e:	a7 95       	ror	r26
 430:	f0 40       	sbci	r31, 0x00	; 0
 432:	53 95       	inc	r21
 434:	c9 f7       	brne	.-14     	; 0x428 <__addsf3x+0x4e>
 436:	7e f4       	brtc	.+30     	; 0x456 <__addsf3x+0x7c>
 438:	1f 16       	cp	r1, r31
 43a:	ba 0b       	sbc	r27, r26
 43c:	62 0b       	sbc	r22, r18
 43e:	73 0b       	sbc	r23, r19
 440:	84 0b       	sbc	r24, r20
 442:	ba f0       	brmi	.+46     	; 0x472 <__addsf3x+0x98>
 444:	91 50       	subi	r25, 0x01	; 1
 446:	a1 f0       	breq	.+40     	; 0x470 <__addsf3x+0x96>
 448:	ff 0f       	add	r31, r31
 44a:	bb 1f       	adc	r27, r27
 44c:	66 1f       	adc	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	c2 f7       	brpl	.-16     	; 0x444 <__addsf3x+0x6a>
 454:	0e c0       	rjmp	.+28     	; 0x472 <__addsf3x+0x98>
 456:	ba 0f       	add	r27, r26
 458:	62 1f       	adc	r22, r18
 45a:	73 1f       	adc	r23, r19
 45c:	84 1f       	adc	r24, r20
 45e:	48 f4       	brcc	.+18     	; 0x472 <__addsf3x+0x98>
 460:	87 95       	ror	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	9e 3f       	cpi	r25, 0xFE	; 254
 46c:	08 f0       	brcs	.+2      	; 0x470 <__addsf3x+0x96>
 46e:	b3 cf       	rjmp	.-154    	; 0x3d6 <__addsf3+0x1e>
 470:	93 95       	inc	r25
 472:	88 0f       	add	r24, r24
 474:	08 f0       	brcs	.+2      	; 0x478 <__addsf3x+0x9e>
 476:	99 27       	eor	r25, r25
 478:	ee 0f       	add	r30, r30
 47a:	97 95       	ror	r25
 47c:	87 95       	ror	r24
 47e:	08 95       	ret

00000480 <__cmpsf2>:
 480:	40 d0       	rcall	.+128    	; 0x502 <__fp_cmp>
 482:	08 f4       	brcc	.+2      	; 0x486 <__cmpsf2+0x6>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret

00000488 <__floatunsisf>:
 488:	e8 94       	clt
 48a:	09 c0       	rjmp	.+18     	; 0x49e <__floatsisf+0x12>

0000048c <__floatsisf>:
 48c:	97 fb       	bst	r25, 7
 48e:	3e f4       	brtc	.+14     	; 0x49e <__floatsisf+0x12>
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	99 23       	and	r25, r25
 4a0:	a9 f0       	breq	.+42     	; 0x4cc <__floatsisf+0x40>
 4a2:	f9 2f       	mov	r31, r25
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	bb 27       	eor	r27, r27
 4a8:	93 95       	inc	r25
 4aa:	f6 95       	lsr	r31
 4ac:	87 95       	ror	r24
 4ae:	77 95       	ror	r23
 4b0:	67 95       	ror	r22
 4b2:	b7 95       	ror	r27
 4b4:	f1 11       	cpse	r31, r1
 4b6:	f8 cf       	rjmp	.-16     	; 0x4a8 <__floatsisf+0x1c>
 4b8:	fa f4       	brpl	.+62     	; 0x4f8 <__floatsisf+0x6c>
 4ba:	bb 0f       	add	r27, r27
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__floatsisf+0x36>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <__floatsisf+0x6c>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <__floatsisf+0x6c>
 4cc:	88 23       	and	r24, r24
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <__floatsisf+0x48>
 4d0:	96 e9       	ldi	r25, 0x96	; 150
 4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <__floatsisf+0x6a>
 4d4:	77 23       	and	r23, r23
 4d6:	21 f0       	breq	.+8      	; 0x4e0 <__floatsisf+0x54>
 4d8:	9e e8       	ldi	r25, 0x8E	; 142
 4da:	87 2f       	mov	r24, r23
 4dc:	76 2f       	mov	r23, r22
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <__floatsisf+0x5e>
 4e0:	66 23       	and	r22, r22
 4e2:	71 f0       	breq	.+28     	; 0x500 <__floatsisf+0x74>
 4e4:	96 e8       	ldi	r25, 0x86	; 134
 4e6:	86 2f       	mov	r24, r22
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	2a f0       	brmi	.+10     	; 0x4f8 <__floatsisf+0x6c>
 4ee:	9a 95       	dec	r25
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	da f7       	brpl	.-10     	; 0x4ee <__floatsisf+0x62>
 4f8:	88 0f       	add	r24, r24
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret

00000502 <__fp_cmp>:
 502:	99 0f       	add	r25, r25
 504:	00 08       	sbc	r0, r0
 506:	55 0f       	add	r21, r21
 508:	aa 0b       	sbc	r26, r26
 50a:	e0 e8       	ldi	r30, 0x80	; 128
 50c:	fe ef       	ldi	r31, 0xFE	; 254
 50e:	16 16       	cp	r1, r22
 510:	17 06       	cpc	r1, r23
 512:	e8 07       	cpc	r30, r24
 514:	f9 07       	cpc	r31, r25
 516:	c0 f0       	brcs	.+48     	; 0x548 <__fp_cmp+0x46>
 518:	12 16       	cp	r1, r18
 51a:	13 06       	cpc	r1, r19
 51c:	e4 07       	cpc	r30, r20
 51e:	f5 07       	cpc	r31, r21
 520:	98 f0       	brcs	.+38     	; 0x548 <__fp_cmp+0x46>
 522:	62 1b       	sub	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	84 0b       	sbc	r24, r20
 528:	95 0b       	sbc	r25, r21
 52a:	39 f4       	brne	.+14     	; 0x53a <__fp_cmp+0x38>
 52c:	0a 26       	eor	r0, r26
 52e:	61 f0       	breq	.+24     	; 0x548 <__fp_cmp+0x46>
 530:	23 2b       	or	r18, r19
 532:	24 2b       	or	r18, r20
 534:	25 2b       	or	r18, r21
 536:	21 f4       	brne	.+8      	; 0x540 <__fp_cmp+0x3e>
 538:	08 95       	ret
 53a:	0a 26       	eor	r0, r26
 53c:	09 f4       	brne	.+2      	; 0x540 <__fp_cmp+0x3e>
 53e:	a1 40       	sbci	r26, 0x01	; 1
 540:	a6 95       	lsr	r26
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	81 1d       	adc	r24, r1
 546:	81 1d       	adc	r24, r1
 548:	08 95       	ret

0000054a <__fp_inf>:
 54a:	97 f9       	bld	r25, 7
 54c:	9f 67       	ori	r25, 0x7F	; 127
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	08 95       	ret

00000556 <__fp_nan>:
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	80 ec       	ldi	r24, 0xC0	; 192
 55a:	08 95       	ret

0000055c <__fp_pscA>:
 55c:	00 24       	eor	r0, r0
 55e:	0a 94       	dec	r0
 560:	16 16       	cp	r1, r22
 562:	17 06       	cpc	r1, r23
 564:	18 06       	cpc	r1, r24
 566:	09 06       	cpc	r0, r25
 568:	08 95       	ret

0000056a <__fp_pscB>:
 56a:	00 24       	eor	r0, r0
 56c:	0a 94       	dec	r0
 56e:	12 16       	cp	r1, r18
 570:	13 06       	cpc	r1, r19
 572:	14 06       	cpc	r1, r20
 574:	05 06       	cpc	r0, r21
 576:	08 95       	ret

00000578 <__fp_round>:
 578:	09 2e       	mov	r0, r25
 57a:	03 94       	inc	r0
 57c:	00 0c       	add	r0, r0
 57e:	11 f4       	brne	.+4      	; 0x584 <__fp_round+0xc>
 580:	88 23       	and	r24, r24
 582:	52 f0       	brmi	.+20     	; 0x598 <__fp_round+0x20>
 584:	bb 0f       	add	r27, r27
 586:	40 f4       	brcc	.+16     	; 0x598 <__fp_round+0x20>
 588:	bf 2b       	or	r27, r31
 58a:	11 f4       	brne	.+4      	; 0x590 <__fp_round+0x18>
 58c:	60 ff       	sbrs	r22, 0
 58e:	04 c0       	rjmp	.+8      	; 0x598 <__fp_round+0x20>
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__fp_split3>:
 59a:	57 fd       	sbrc	r21, 7
 59c:	90 58       	subi	r25, 0x80	; 128
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	59 f0       	breq	.+22     	; 0x5ba <__fp_splitA+0x10>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <__fp_splitA+0x1a>
 5a8:	47 95       	ror	r20

000005aa <__fp_splitA>:
 5aa:	88 0f       	add	r24, r24
 5ac:	97 fb       	bst	r25, 7
 5ae:	99 1f       	adc	r25, r25
 5b0:	61 f0       	breq	.+24     	; 0x5ca <__fp_splitA+0x20>
 5b2:	9f 3f       	cpi	r25, 0xFF	; 255
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <__fp_splitA+0x2a>
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <__fp_split3+0xe>
 5c4:	46 95       	lsr	r20
 5c6:	f1 df       	rcall	.-30     	; 0x5aa <__fp_splitA>
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__fp_splitA+0x30>
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	f1 cf       	rjmp	.-30     	; 0x5b6 <__fp_splitA+0xc>
 5d4:	86 95       	lsr	r24
 5d6:	71 05       	cpc	r23, r1
 5d8:	61 05       	cpc	r22, r1
 5da:	08 94       	sec
 5dc:	08 95       	ret

000005de <__fp_zero>:
 5de:	e8 94       	clt

000005e0 <__fp_szero>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	66 27       	eor	r22, r22
 5e4:	77 27       	eor	r23, r23
 5e6:	cb 01       	movw	r24, r22
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__mulsf3>:
 5ec:	0b d0       	rcall	.+22     	; 0x604 <__mulsf3x>
 5ee:	c4 cf       	rjmp	.-120    	; 0x578 <__fp_round>
 5f0:	b5 df       	rcall	.-150    	; 0x55c <__fp_pscA>
 5f2:	28 f0       	brcs	.+10     	; 0x5fe <__mulsf3+0x12>
 5f4:	ba df       	rcall	.-140    	; 0x56a <__fp_pscB>
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <__mulsf3+0x12>
 5f8:	95 23       	and	r25, r21
 5fa:	09 f0       	breq	.+2      	; 0x5fe <__mulsf3+0x12>
 5fc:	a6 cf       	rjmp	.-180    	; 0x54a <__fp_inf>
 5fe:	ab cf       	rjmp	.-170    	; 0x556 <__fp_nan>
 600:	11 24       	eor	r1, r1
 602:	ee cf       	rjmp	.-36     	; 0x5e0 <__fp_szero>

00000604 <__mulsf3x>:
 604:	ca df       	rcall	.-108    	; 0x59a <__fp_split3>
 606:	a0 f3       	brcs	.-24     	; 0x5f0 <__mulsf3+0x4>

00000608 <__mulsf3_pse>:
 608:	95 9f       	mul	r25, r21
 60a:	d1 f3       	breq	.-12     	; 0x600 <__mulsf3+0x14>
 60c:	95 0f       	add	r25, r21
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	55 1f       	adc	r21, r21
 612:	62 9f       	mul	r22, r18
 614:	f0 01       	movw	r30, r0
 616:	72 9f       	mul	r23, r18
 618:	bb 27       	eor	r27, r27
 61a:	f0 0d       	add	r31, r0
 61c:	b1 1d       	adc	r27, r1
 61e:	63 9f       	mul	r22, r19
 620:	aa 27       	eor	r26, r26
 622:	f0 0d       	add	r31, r0
 624:	b1 1d       	adc	r27, r1
 626:	aa 1f       	adc	r26, r26
 628:	64 9f       	mul	r22, r20
 62a:	66 27       	eor	r22, r22
 62c:	b0 0d       	add	r27, r0
 62e:	a1 1d       	adc	r26, r1
 630:	66 1f       	adc	r22, r22
 632:	82 9f       	mul	r24, r18
 634:	22 27       	eor	r18, r18
 636:	b0 0d       	add	r27, r0
 638:	a1 1d       	adc	r26, r1
 63a:	62 1f       	adc	r22, r18
 63c:	73 9f       	mul	r23, r19
 63e:	b0 0d       	add	r27, r0
 640:	a1 1d       	adc	r26, r1
 642:	62 1f       	adc	r22, r18
 644:	83 9f       	mul	r24, r19
 646:	a0 0d       	add	r26, r0
 648:	61 1d       	adc	r22, r1
 64a:	22 1f       	adc	r18, r18
 64c:	74 9f       	mul	r23, r20
 64e:	33 27       	eor	r19, r19
 650:	a0 0d       	add	r26, r0
 652:	61 1d       	adc	r22, r1
 654:	23 1f       	adc	r18, r19
 656:	84 9f       	mul	r24, r20
 658:	60 0d       	add	r22, r0
 65a:	21 1d       	adc	r18, r1
 65c:	82 2f       	mov	r24, r18
 65e:	76 2f       	mov	r23, r22
 660:	6a 2f       	mov	r22, r26
 662:	11 24       	eor	r1, r1
 664:	9f 57       	subi	r25, 0x7F	; 127
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	8a f0       	brmi	.+34     	; 0x68c <__mulsf3_pse+0x84>
 66a:	e1 f0       	breq	.+56     	; 0x6a4 <__mulsf3_pse+0x9c>
 66c:	88 23       	and	r24, r24
 66e:	4a f0       	brmi	.+18     	; 0x682 <__mulsf3_pse+0x7a>
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	bb 1f       	adc	r27, r27
 676:	66 1f       	adc	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	a9 f7       	brne	.-22     	; 0x66c <__mulsf3_pse+0x64>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	70 f0       	brcs	.+28     	; 0x6a4 <__mulsf3_pse+0x9c>
 688:	60 cf       	rjmp	.-320    	; 0x54a <__fp_inf>
 68a:	aa cf       	rjmp	.-172    	; 0x5e0 <__fp_szero>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	ec f3       	brlt	.-6      	; 0x68a <__mulsf3_pse+0x82>
 690:	98 3e       	cpi	r25, 0xE8	; 232
 692:	dc f3       	brlt	.-10     	; 0x68a <__mulsf3_pse+0x82>
 694:	86 95       	lsr	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	e7 95       	ror	r30
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	c1 f7       	brne	.-16     	; 0x694 <__mulsf3_pse+0x8c>
 6a4:	fe 2b       	or	r31, r30
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
